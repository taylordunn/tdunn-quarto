{
  "hash": "b704cd11f4939f02088f43ca18d59a15",
  "result": {
    "markdown": "---\ntitle: \"Canada COVID-19 data in R: creating a package\"\ndescription: |\n  Creating an R package that wraps the Canadian COVID-19 tracker API.\ndate: 2021-12-30\nparams:\n  date: 2021-12-30\n  slug: \"canada-covid-19-data-in-r-creating-a-package\"\ncategories:\n  - R\n  - COVID-19\n  - API\n  - package development\nimage: preview.png\n---\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"R setup\"}\nlibrary(tidyverse)\nlibrary(ggtext)\n\nlibrary(dunnr)\nextrafont::loadfonts(device = \"win\", quiet = TRUE)\ntheme_set(theme_td())\nset_geom_fonts()\nset_palette()\n```\n:::\n\n\n\n## TL;DR\n\nTo see the finished product, check out the [package website](https://taylordunn.github.io/canadacovid/) and the [source code](https://github.com/taylordunn/canadacovid).\nThe package was published on CRAN recently, and can be downloaded with:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"canadacovid\")\n```\n:::\n\n\n## Introduction\n\nIn [my previous post](../2021-12-28-canada-covid-19-data-in-r-exploring-the-api), I explored the \n[Canadian COVID-19 tracker API](https://api.covid19tracker.ca/) and decided to make an API wrapper package to facilitate using it in R.\n\n## Naming\n\nThe first, and [some](https://devguide.ropensci.org/building.html#package-name-and-metadata) [would say](https://r-pkgs.org/Workflow101.html#naming) [the hardest step](https://www.njtierney.com/post/2018/06/20/naming-things/) for writing a package (or any piece of code for that matter) is naming it.\nI considered a lot of options, and in the end decided on the admittedly boring `canadacovid`, which I verified was available:\n\n\n::: {.cell}\n\n```{.r .cell-code}\navailable::available(\"canadacovid\", browse = FALSE)\n```\n:::\n\n\n![](images/available.PNG)\n\n## General steps\n\nWith the `usethis` and `devtools` packages, getting an R package started with best practices is very easy.\n\nFirst, I create the package, set it up on GitHub, and write some minor documentation:\n\n1. `usethis::create_tidy_package(\"canadacovid\")`: creates the RStudio project and opens it.\n2. Connect GitHub.\n    * `usethis::use_git()` creates the local repo.\n    * `usethis::use_github()` creates the repo on GitHub and makes an initial commit and push.\n    * `usethis::use_tidy_github()` adds some files to follow `tidyverse` package conventions, e.g. a template `contributing.md`.\n    * `usethis::use_github_actions()` configures a basic `R CMD check` workflow on GitHub Actions.^[Using GitHub Actions is new to me, and probably overkill for a small hobby project like this, but I was inspired by [Jim Hester's RStudio::Conf 2020 talk](https://www.rstudio.com/resources/rstudioconf-2020/azure-pipelines-and-github-actions/) to give it a try.]\n    * `usethis::use_tidy_github_actions()` sets up additional workflows for GitHub Actions.\n3. As a `tidyverse` enthusiast, I always setup my packages to use `magittr`'s pipe operator `%>%` with `usethis::use_pipe`.\n4. `usethis::use_testthat()` sets up the `testthat` package and directory structure.\n    * This step actually isn't necessary, as it was already done by `create_tidy_package`.\n4. Update the `DESCRIPTION` file, particularly the `Title`, `Description` and `Authors` fields.\n5. Run `devtools::document()` which will update the `NAMESPACE` file with the `magittr` pipe.\n\nImmediately after pushing these setup steps to GitHub, GitHub Actions got to work but failed on two of three workflows:\n\n![](images/github-actions-1.PNG)\n\nBoth the `R CMD` and the test coverage workflows failed because I haven't written any tests yet (or functions to be tested for that matter).\nWhich brings me to the main package development process:\n\n1. `usethis::use_r(\"file-name\")` creates the `R/file-name.R` file.\n2. Add one or more R functions to `file-name.R`.\n3. `usethis::use_package(\"dependency\")` to declare any package dependencies, updating the `DESCRIPTION` file.\n4. Document the function(s):\n    * In RStudio, select `Code -> Insert Roxygen Skeleton` (or Ctrl+Alt+Shift+R on Windows).\n    * Run `devtools::document()` to generate the `.Rd` file and update `NAMESPACE`.\n    * Optional: check the documentation with `?func-name`.\n    * Optional: if using examples, check them with `devtools::check_examples()`.\n5. Try it out.\n    * `devtools::load_all()` to load all package functions (Ctrl+Shift+L on Windows).\n    * `devtools::check()` runs `R CMD check` on the package.\n6. Write tests with `testthat`.\n    * `use_test(\"file-name\")` creates the `tests/testthat/test-file-name.R` file, paired to `R/file-name.R` file.\n    * `devtools::test()` or `usethis::test_package()` runs all tests.\n    * `devtools::test_active_file()` tests just the active file.\n7. Optional: update the `README.Rmd` with new functionality.\n    * `devtools::build_readme()` to knit.\n8. Optional: write or update a vignette to incorporate new functionality.\n    * `usethis::use_vignette(\"vignette-name\")` to initialize the vignette file.\n    * `devtools::build_vignettes()` to knit the vignettes.\n\n## Summary\n\nThe first function I will add retrieves the latest summary data from the API.\nI'll call this file `summary.R`, and create it (and it's associated test file) with:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::use_r(\"summary\")\nusethis::use_test(\"summary\")\n```\n:::\n\n\nAnd here is the `get_summary` function added to `R/summary.R`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_summary <- function(split = c(\"overall\", \"province\", \"region\")) {\n  split <- match.arg(split)\n  base_url <- \"https://api.covid19tracker.ca/summary\"\n  split_path <- switch(split,\n                       overall = \"\", province = \"/split\", region = \"/split/hr\")\n  url <- paste0(base_url, split_path)\n\n  resp <- httr::GET(url)\n\n  if (httr::http_error(resp)) {\n    stop(paste(\"API requested failed with code\", httr::status_code(resp)),\n         call. = FALSE)\n  }\n\n  if (httr::http_type(resp) != \"application/json\") {\n    stop(\"API did not return JSON\", call. = FALSE)\n  }\n\n  content_parsed <-\n    jsonlite::fromJSON(httr::content(resp, \"text\", encoding = \"UTF-8\"),\n                       simplifyVector = FALSE)\n\n  dplyr::bind_rows(content_parsed$data) %>%\n    dplyr::bind_cols(content_parsed[\"last_updated\"]) %>%\n    dplyr::mutate(\n      dplyr::across(tidyselect::matches(\"^change|total\"), as.integer),\n      dplyr::across(tidyselect::matches(\"date\"), as.Date),\n      last_updated = as.POSIXct(.data$last_updated)\n    )\n}\n```\n:::\n\n\nSome notes:\n\n* See [my previous post](../2021-12-28-canada-covid-19-data-in-r-exploring-the-api/#summary) for a more thorough explanation of how this code is interacting with the API and processing the data.\n* For all of the imported functions, it is [good practice to explicitly state the package](https://r-pkgs.org/dependencies.html#run-time-vs-develop-time-dependencies), e.g. `httr::GET`.\n    * The exception is the very last line where I use `rlang` to refer to the variable `.data$last_updated`. I find it clunky to include package names within pipe operations like that.\n* `match.arg` is a helpful base R function which matches the `split` parameter to just one of the given values. It returns an error if an unexpected value is provided.\n* I followed the advice from [this `httr` vignette](https://cran.r-project.org/web/packages/httr/vignettes/api-packages.html) and turned API errors into R errors.\n    * The `httr::http_error` conditional returns an error message if the GET request failed, with the resulting HTTP status code.\n    * The `httr::http_type` conditional returns an error message if the content is not in JSON format as expected.\n* Instead of using the `as = \"parsed\"` argument to `httr::content`, I parse the raw text directly using `jsonlite::fromJSON`.\n    * See [this warning from the `httr` documentation](https://httr.r-lib.org/reference/content.html#warning) for the reason.\n    \nAdd the dependencies:\n    \n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::use_package(\"httr\", type = \"Imports\")\nusethis::use_package(\"jsonlite\", type = \"Imports\")\nusethis::use_package(\"dplyr\", type = \"Imports\")\nusethis::use_package(\"tidyselect\", type = \"Imports\")\nusethis::use_package(\"rlang\", type = \"Imports\")\n```\n:::\n\n\nI've explicitly set the `type` to \"Imports\" (which wasn't necessary as this is the default) to make the point that it is [recommended over \"Depends\"](https://r-pkgs.org/dependencies.html#sec-search-path):\n  \n>Unless there is a good reason otherwise, you should always list packages in Imports not Depends. Thatâ€™s because a good package is self-contained, and minimises changes to the global environment (including the search path). \n    \nNext, some [Roxygen documentation](https://r-pkgs.org/man.html#roxygen2-basics):\n    \n\n::: {.cell}\n\n```{.r .cell-code}\n#' Get the most recent summary data\n#'\n#' Runs a GET request of summary data from the COVID-19 tracker API, and\n#' returns parsed data.\n#' Via the `split` argument, data my be \"overall\" (all provinces/territories\n#' combined), by \"province\" (one row per province/territory) or by \"region\"\n#' (one row per health region).\n#'\n#' @param split One of \"overall\", \"province\", or \"region\" to specify how the\n#'   data is split.\n#'\n#' @return A data frame containing the summary data.\n#' @export\n#'\n#' @examples\n#'\n#' get_summary()\n#' get_summary(\"province\")\n#' get_summary(\"region\")\n#'\n#' @importFrom httr GET http_error http_type content\n#' @importFrom jsonlite fromJSON\n#' @importFrom dplyr bind_rows bind_cols mutate across\n#' @importFrom tidyselect matches\n#' @importFrom rlang .data\nget_summary <- function(split = c(\"overall\", \"province\", \"region\")) {\n  ...\n```\n:::\n\n\nNow I'll edit the `test-summary.R` file with some simple tests (and run it here as an example):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(testthat)\n```\n:::\n\n::: {.cell hash='canada-covid-19-data-in-r-creating-a-package_cache/html/get-summary-test_d4ded40a5f38e8a7595e06de72f96cc9'}\n\n```{.r .cell-code}\ntest_that(\"get_summary works\", {\n  expect_error(get_summary(split = \"provice\"), \"arg\")\n\n  summary_overall <- get_summary()\n  expect_equal(nrow(summary_overall), 1)\n  expect_equal(ncol(summary_overall), 24)\n  expect_false(any(is.na(summary_overall)))\n\n  summary_province <- get_summary(split = \"province\")\n  expect_equal(nrow(summary_province), 13)\n  expect_equal(ncol(summary_province), 25)\n  expect_false(any(is.na(summary_province)))\n  expect_setequal(summary_province$province,\n                  c(\"ON\", \"QC\", \"NS\", \"NB\", \"MB\", \"BC\", \"PE\", \"SK\", \"AB\",\n                    \"NL\", \"NT\", \"YT\", \"NU\"))\n\n  summary_region <- get_summary(split = \"region\")\n  expect_equal(nrow(summary_region), 92)\n})\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTest passed ðŸ˜¸\n```\n:::\n:::\n\n\nEverything passed successfully.\nHere is what was tested, from top to bottom:\n\n* An error was returned for a misspelled `split` argument.\n* `summary_overall` has the expected number of rows, columns and no values are `NA`.\n* `summary_province` has the expected number of rows, columns and no values are `NA`. Also the expected 13 provinces/territories are returned.\n* `summary_region` has the expected number of rows. The number of columns will vary, because columns with all missing (`NULL`) values will be dropped.\n\nNow with a documented and tested function, I do the following:\n\n* `devtools::check()` to run a `R CMD check` (also runs the `testthat` tests), which passes.\n* Update the `README.Rmd` with installation instructions, and an example of using `get_summary()`. Then build with `devtools::build_readme()`.\n\nI pushed this first iteration of the package to GitHub and, after about 10 minutes, all of the GitHub Actions workflows were successful:\n\n![](images/github-actions-2.PNG)\n\n### Detour: refactoring code (already)\n\nBefore continuing with other functions, it occurred to me that I would end up re-writing this particular block of code multiple times:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresp <- httr::GET(url)\n\nif (httr::http_error(resp)) {\n  stop(paste(\"API requested failed with code\", httr::status_code(resp)),\n       call. = FALSE)\n}\n\nif (httr::http_type(resp) != \"application/json\") {\n  stop(\"API did not return JSON\", call. = FALSE)\n}\n\ncontent_parsed <-\n  jsonlite::fromJSON(httr::content(resp, \"text\", encoding = \"UTF-8\"),\n                     simplifyVector = FALSE)\n```\n:::\n\n\nA quote from [R for Data Science](https://r4ds.had.co.nz/functions.html?q=function#when-should-you-write-a-function):\n\n>You should consider writing a function whenever youâ€™ve copied and pasted a block of code more than twice (i.e. you now have three copies of the same code).\n\nSo instead of copying and pasting this code block, I made a new function in a new file, `api.R`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::use_r(\"api\")\nusethis::use_test(\"api\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#' Get content and parse it\n#'\n#' Sends a GET request to https://api.covid19tracker.ca/.\n#' If the request is successful and the returned content is JSON, formats it and\n#' returns it parsed (via `jsonlite::fromJSON`).\n#'\n#' @param url A string URL linking to the API. If it does not contain the base\n#'   \"https://api.covid19tracker.ca\", then `url` will be combined with the base\n#'   to attempt to make a valid URL (and return a warning).\n#'\n#' @return A list.\n#' @export\n#'\n#' @examples\n#'\n#' get_content_parsed(\"https://api.covid19tracker.ca/provinces\")\n#'\n#' @importFrom httr GET http_error http_type content\n#' @importFrom jsonlite fromJSON\n#' @importFrom stringr str_detect\nget_content_parsed <- function(url) {\n  base_url <- \"https://api.covid19tracker.ca\"\n  if (!stringr::str_detect(url, base_url)) {\n    url <- paste0(base_url, \"/\", url)\n    warning(\n      paste0(\"Provided URL did not include base (\", base_url, \").\\n\",\n             \"Combined URL with base for GET request: \", url)\n    )\n  }\n\n  resp <- httr::GET(url)\n\n  if (httr::http_error(resp)) {\n    stop(paste(\"API requested failed with code\", httr::status_code(resp)),\n         call. = FALSE)\n  }\n\n  if (httr::http_type(resp) != \"application/json\") {\n    stop(\"API did not return JSON\", call. = FALSE)\n  }\n\n  jsonlite::fromJSON(httr::content(resp, \"text\", encoding = \"UTF-8\"),\n                     simplifyVector = FALSE)\n}\n```\n:::\n\n\nThis function expects a full `url`, but will add \"https://api.covid19tracker.ca\" if it is missing (and return a warning to say so).\nSome simple tests for `get_content_parsed`:\n\n\n::: {.cell hash='canada-covid-19-data-in-r-creating-a-package_cache/html/get-content-parsed-test_6941f9ba4fed14c523bac5f00677926d'}\n\n```{.r .cell-code}\ntest_that(\"get_content_parsed works\", {\n  expect_warning(get_content_parsed(\"provinces\"), \"base\")\n  expect_error(\n    get_content_parsed(\"https://api.covid19tracker.ca/provices\"), \"API\"\n  )\n\n  provinces <- get_content_parsed(\"https://api.covid19tracker.ca/provinces\")\n  expect_true(is.list(provinces))\n  expect_equal(lengths(provinces), rep(12, 16))\n})\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTest passed ðŸ˜€\n```\n:::\n:::\n\n\nEverything checks out, so I replace some of the code in `get_summary` with a call to `get_content_parsed`.\n\nI don't need to re-write tests for `get_summary` because it is functionally the same, but I *do re-run those tests* to make sure I didn't break it with these changes (this is the whole point of unit testing).\nI then run `devtools::check()` and push changes to GitHub.\n\n## Reports\n\nWriting the function to get reports follows the same procedure:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::use_r(\"reports\")\nusethis::use_test(\"reports\")\n```\n:::\n\n\nThe reports are a bit more complicated because the queries can [accept a few different parameters](../2021-12-28-canada-covid-19-data-in-r-exploring-the-api/#parameters).\nHere is my first draft of `get_reports`, along with Roxygen documentation:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#' Get the day-to-day reports\n#'\n#' Runs a GET request of reports data from the COVID-19 tracker API, and\n#' returns parsed data.\n#' Via the `split` argument, data may be \"overall\" (all provinces/territories\n#' combined), or by \"province\".\n#' Alternatively, provide one or more two-letter codes (e.g. \"AB\") to `province`\n#' to return reports for specific provinces, or one or more numeric `region`\n#' codes (e.g. \"1204\") to return specific health regions.\n#'\n#' @param split One of \"overall\", or \"province\" to specify how the\n#'   data is split. An \"overall\" report gives cumulative numbers across Canada.\n#'   Splitting by \"province\" returns all reports for all provinces/territories.\n#' @param province One or more province/territory codes (\"AB\", \"BC\", \"MB\", \"NB\",\n#'   \"NL\", \"NS\", \"NT\", \"NU\", \"ON\", \"PE\", \"QC\", \"SK\", \"YT\") to get reports.\n#'   Upper, lower and mixed case strings are accepted.\n#' @param region One or more health region IDs to get reports. Numeric and\n#'   character values are accepted.\n#' @param fill_dates When TRUE, the response fills in any missing dates with\n#'   blank entries.\n#' @param stat Returns only the specified statistics, e.g. \"cases\".\n#' @param date Returns reports from only the specified date.\n#' @param after Returns reports from only on or after the specified date.\n#' @param before Returns reports from only on or before the specified date.\n#'\n#' @return A data frame containing the reports data, one row per day. Includes\n#'   a `province` variable if data is split by province, and a `hr_uid` variable\n#'   if data is split by health region.\n#' @export\n#'\n#' @examples\n#'\n#' get_reports()\n#' get_reports(\"province\")\n#' get_reports(province = c(\"AB\", \"SK\"))\n#' get_reports(region = 1204)\n#' get_reports(region = c(\"472\", 1204), stat = \"cases\")\n#' @importFrom dplyr bind_rows bind_cols mutate across\n#' @importFrom tidyselect matches\n#' @importFrom rlang .data\n#' @importFrom purrr imap_chr map_dfr\n#' @importFrom tibble lst\nget_reports <- function(split = c(\"overall\", \"province\"),\n                        province = NULL, region = NULL,\n                        fill_dates = NULL, stat = NULL, date = NULL,\n                        after = NULL, before = NULL) {\n  base_url <- \"https://api.covid19tracker.ca/reports/\"\n  province_codes <- c(\n    \"AB\", \"BC\", \"MB\", \"NB\", \"NL\", \"NS\", \"NT\", \"NU\", \"ON\",\n    \"PE\", \"QC\", \"SK\", \"YT\"\n  )\n\n  split <- match.arg(split)\n  if (split == \"province\") province <- province_codes\n\n  parameters <- tibble::lst(fill_dates, stat, date, after, before)\n  # Remove NULL parameters\n  parameters <- parameters[lengths(parameters) == 1]\n  if (length(parameters) > 0) {\n    params_url <- purrr::imap_chr(parameters, ~ paste0(.y, \"=\", tolower(.x))) %>%\n      paste(collapse = \"&\")\n    params_url <- paste0(\"?\", params_url)\n  } else {\n    params_url <- \"\"\n  }\n\n  if (!is.null(province)) {\n    province <- match.arg(toupper(province), province_codes, several.ok = TRUE)\n\n    reports <- purrr::map_dfr(\n      province,\n      function(province) {\n        url <- paste0(base_url, \"province/\", province, params_url)\n        content_parsed <- get_content_parsed(url)\n\n        dplyr::bind_cols(\n          content_parsed[c(\"province\", \"last_updated\")],\n          dplyr::bind_rows(content_parsed$data)\n        )\n      }\n    )\n  } else if (!is.null(region)) {\n    reports <- purrr::map_dfr(\n      region,\n      function(region) {\n        url <- paste0(base_url, \"regions/\", region, params_url)\n        content_parsed <- get_content_parsed(url)\n\n        dplyr::bind_cols(\n          content_parsed[c(\"hr_uid\", \"last_updated\")],\n          dplyr::bind_rows(content_parsed$data)\n        )\n      }\n    )\n  } else {\n    content_parsed <- get_content_parsed(paste0(base_url, params_url))\n    reports <- dplyr::bind_cols(\n      content_parsed[\"last_updated\"],\n      dplyr::bind_rows(content_parsed$data)\n    )\n  }\n\n  reports %>%\n    dplyr::mutate(\n      dplyr::across(tidyselect::matches(\"^change|total\"), as.integer),\n      dplyr::across(tidyselect::matches(\"date\"), as.Date),\n      last_updated = as.POSIXct(.data$last_updated)\n    )\n}\n```\n:::\n\n\n<aside>\n\nAnd the new dependencies:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::use_package(\"tibble\")\nusethis::use_package(\"purrr\")\n```\n:::\n\n\n</aside>\n\nThe `get_content_parsed` function paid off already -- I used it three times above, saving ~20 lines of code each time.\n\nNote that I didn't allow `split = \"region\"` as an option because, if the function queries all regions, 92 separate `GET` requests are sent to the API in a short period.\nThis eventually fails with HTTP code 429, indicating too many requests.\nThis is called \"rate limiting\", and the error code is a polite way of asking someone to stop spamming requests.\nI might alter this function in the future to send these requests slower, either with a call to `Sys.sleep()` or with the [`polite` package](https://github.com/dmi3kno/polite).\n\n`get_reports` is a more complex function than `get_summary`, and so I wrote more tests to try to capture that complexity:\n\n\n::: {.cell hash='canada-covid-19-data-in-r-creating-a-package_cache/html/get-reports-test_9fdee4bab1ea0bfe273af8f1f7d45c91'}\n\n```{.r .cell-code}\ntest_that(\"get_reports works\", {\n  reports_overall <- get_reports()\n  expect_equal(ncol(reports_overall), 24)\n  expect_false(any(is.na(reports_overall)))\n\n  reports_province <- get_reports(split = \"province\")\n  expect_equal(dplyr::n_distinct(reports_province$province), 13)\n  expect_equal(min(reports_province$date), min(reports_overall$date))\n  expect_equal(max(reports_province$date), max(reports_overall$date))\n\n  reports_ns_nb_nv <- get_reports(province = c(\"NS\", \"nb\", \"nU\", \"test\"))\n  expect_equal(\n    unique(reports_ns_nb_nv$province), c(\"NS\", \"NB\", \"NU\")\n  )\n  expect_equal(\n    reports_province %>% dplyr::filter(province == \"NS\"),\n    reports_ns_nb_nv %>% dplyr::filter(province == \"NS\")\n  )\n\n  expect_error(get_reports(split = \"region\"), \"arg\")\n\n  reports_592_2407_3561 <- get_reports(region = c(592, \"2407\", 3561))\n  expect_equal(\n    unique(reports_592_2407_3561$hr_uid),\n    c(592, 2407, 3561)\n  )\n\n  reports_criticals <- get_reports(split = \"province\", stat = \"criticals\")\n  expect_equal(ncol(reports_criticals), 5)\n  expect_setequal(names(reports_criticals),\n                  c(\"province\", \"last_updated\", \"date\",\n                    \"change_criticals\", \"total_criticals\"))\n\n  report_2021_07_20 <- get_reports(province = \"MB\", date = \"2021-07-20\")\n  expect_equal(report_2021_07_20$date, as.Date(\"2021-07-20\"))\n  expect_equal(report_2021_07_20$province, \"MB\")\n\n  report_date_range <- get_reports(region = 3570,\n                                   after = \"2021-10-28\", before = \"2021-11-02\")\n  expect_equal(min(report_date_range$date), as.Date(\"2021-10-28\"))\n  expect_equal(max(report_date_range$date), as.Date(\"2021-11-02\"))\n})\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTest passed ðŸ¥³\n```\n:::\n:::\n\n\n### Detour: rate limiting\n\nPushing the `reports` file and tests to GitHub resulted in failed `R CMD check`s due to API errors with the HTTP code 429.\nThis is because all my `testthat` tests were running on 9 different platforms and flooding the API with too many requests.\n\nThere are more sophisticated ways to limit the request rate (e.g. using the [re-written `httr2` package](https://httr2.r-lib.org/), the [`vcr` package](https://github.com/vcr/vcr), the [`httptest` package](https://github.com/nealrichardson/httptest)) but I decided to use the humble `Sys.sleep()`.\nTo control the delay time across all tests, I added a [setup file](https://testthat.r-lib.org/articles/test-fixtures.html#package) at `tests/testthat/setup.R` with a very simple function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrequest_sleep <- function(seconds = 10) {\n  Sys.sleep(seconds)\n}\n```\n:::\n\n\nI then called this function before every `GET` request in my tests so that there was at least a 10 second delay between each (I initially tried 5 seconds, but it was still too fast).\n\n## Vaccination data\n\nThe vaccination data is organized a bit differently -- see the [API documentation](https://api.covid19tracker.ca/docs/1.0/vaccinations) or [my exploration of it](../2021-12-28-canada-covid-19-data-in-r-exploring-the-api/#vaccination-data).\n\n### Summary and reports\n\nThe summary and reports vaccination data is simply the same summary and reports from before, but with only the statistics related to vaccination: `vaccinations`, `vaccinated`, `boosters_1`, and `vaccines_distributed`.\nThis function simply wraps my previous `get_summary()` and `get_reports()` functions, and returns the relevant variables:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"`get_vaccination_data()` documentation\"}\n#' Get vaccination data\n#'\n#' Runs a GET request of vaccination data from the COVID-19 tracker API, and\n#' returns parsed data.\n#' Data may be returned as `type` = \"summary\" (the most recent data) or\n#' `type` = \"reports\" (day-to-day reports).\n#' Via the `split` argument, data may be \"overall\" (all provinces/territories\n#' combined), by \"province\", or by \"region\".\n#' Alternatively, provide one or more two-letter codes (e.g. \"AB\") to `province`\n#' to return reports for specific provinces, or one or more numeric `region`\n#' codes (e.g. \"1204\") to return specific health regions.\n#'\n#' @param type One of \"summary\" (most recent data) or \"reports\" (day-to-day\n#'   data).\n#' @param split One of \"overall\", \"province\", or \"region\" to specify how the\n#'   data is split. An \"overall\" summary or report gives cumulative numbers\n#'   across Canada. Splitting by \"province\" returns data for all\n#'   provinces/territories. Splitting by \"region\" is only available for\n#'   \"summary\" data, and returns data for all health regions.\n#' @param province One or more province/territory codes (\"AB\", \"BC\", \"MB\", \"NB\",\n#'   \"NL\", \"NS\", \"NT\", \"NU\", \"ON\", \"PE\", \"QC\", \"SK\", \"YT\") to get reports.\n#'   Upper, lower and mixed case strings are accepted.\n#' @param region One or more health region IDs to get reports. Numeric and\n#'   character values are accepted.\n#' @param fill_dates When TRUE, the response fills in any missing dates with\n#'   blank entries.\n#' @param stat Returns only the specified statistics, e.g. \"cases\".\n#' @param date Returns reports from only the specified date.\n#' @param after Returns reports from only on or after the specified date.\n#' @param before Returns reports from only on or before the specified date.\n#'\n#' @return A data frame containing the vaccinations data. Includes\n#'   a `province` variable if data is split by province, and a `hr_uid` variable\n#'   if data is split by health region.\n#' @export\n#'\n#' @examples\n#'\n#' get_vaccination_data()\n#' get_vaccination_data(split = \"province\")\n#' get_vaccination_data(type = \"reports\", split = \"overall\")\n#' get_vaccination_data(type = \"reports\", split = \"overall\",\n#'                      date = \"2021-12-25\")\n#' @importFrom dplyr select\n#' @importFrom tidyselect matches\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nget_vaccination_data <- function(type = c(\"summary\", \"reports\"),\n                                 split = c(\"overall\", \"province\", \"region\"),\n                                 province = NULL, region = NULL,\n                                 fill_dates = NULL, stat = NULL, date = NULL,\n                                 after = NULL, before = NULL) {\n  type <- match.arg(type)\n  split <- match.arg(split)\n\n  if (type == \"summary\") {\n    vaccination_data <- get_summary(split)\n  } else {\n    # Getting reports for each region sends too many requests to the API\n    if (split == \"region\") {\n      stop(paste(\n        \"For `type` = 'reports', only \",\n        \"`split` = 'overall' and 'province' are available.\"\n      ))\n    }\n\n    vaccination_data <- get_reports(\n      split, province, region, fill_dates, stat,\n      date, after, before\n    )\n  }\n\n  vaccination_data %>%\n    dplyr::select(\n      tidyselect::matches(\"province|hr_uid\"),\n      tidyselect::matches(\"date|last_updated\"),\n      tidyselect::matches(\"vacc|boost\")\n    )\n}\n```\n:::\n\n\nBecause this function can return both summaries and reports, I have to put in a `stop()` condition if reports by health region is requested, as this is not allowed by the API.\n\nThe tests for `get_vaccination_data` make use of the new `request_sleep` function:\n\n\n::: {.cell hash='canada-covid-19-data-in-r-creating-a-package_cache/html/get-vaccination-data-test_efa9f7d8f441e9cfcfe812fa6e0682ea'}\n\n```{.r .cell-code}\ntest_that(\"get_vaccination_data works\", {\n  request_sleep()\n  vaccination_data_summary <- get_vaccination_data()\n  expect_equal(nrow(vaccination_data_summary), 1)\n  expect_equal(ncol(vaccination_data_summary), 12)\n\n  request_sleep()\n  vaccination_data_report <- get_vaccination_data(type = \"reports\")\n  expect_equal(ncol(vaccination_data_report), 12)\n  expect_false(any(is.na(vaccination_data_report)))\n\n  request_sleep()\n  vaccination_data_summary_region <- get_vaccination_data(split = \"region\")\n  expect_equal(nrow(vaccination_data_summary_region), 92)\n  expect_error(get_vaccination_data(type = \"reports\", split = \"region\"))\n\n  request_sleep()\n  vaccination_data_ns_pe <- get_vaccination_data(type = \"reports\",\n                                                 province = c(\"NS\", \"pe\"))\n  expect_equal(unique(vaccination_data_ns_pe$province), c(\"NS\", \"PE\"))\n\n  request_sleep()\n  expect_equal(nrow(vaccination_data_ns_pe),\n               nrow(get_reports(province = c(\"NS\", \"pe\"))))\n})\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTest passed ðŸ˜€\n```\n:::\n:::\n\n\n### Sub-regions\n\nIn some provinces/territories, there is additional vaccination data at the sub-region level, which requires unique requests from the API:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"`get_subregion_vaccination_data()` documentation\"}\n#' Get sub-region vaccination data\n#'\n#' Runs a GET request of sub-region vaccination data from the COVID-19 tracker\n#' API, and returns parsed data.\n#' The `dates` argument specifies the time frame of the data: \"current\"\n#' (the default; latest report for each sub-region), \"recent\"\n#' (15 most recent reports for each sub-region), and \"all\" (returns all reports\n#' for one or more sub-regions specified by the `subregion_code` argument).\n#' To get a list of available sub-regions, use the function `get_subregions()`.\n#'\n#' Note that sub-region vaccination data is only for select provinces and\n#' territories. Also the percentages reported differ between percent of total\n#' population, and percent of eligible population.\n#' See the API documentation for more details:\n#' https://api.covid19tracker.ca/docs/1.0/vaccinations.\n#'\n#' @param dates One of \"current\", \"recent\", or \"all\" to specify the time frame\n#'   of the reports returned. If choosing \"all\" reports, must also provide one\n#'   or more sub-region codes.\n#' @param subregion_code One or more sub-region codes. Returns all reports for\n#'   those sub-regions (even if `dates` is not \"all\")\n#'\n#' @return A data frame with one row per sub-region report.\n#' @export\n#'\n#' @examples\n#'\n#' get_subregion_vaccination_data()\n#' get_subregion_vaccination_data(\"recent\")\n#' get_subregion_vaccination_data(\"all\", subregion_code = c(\"ON382\", \"SK007\"))\n#' @importFrom dplyr bind_cols bind_rows mutate\n#' @importFrom purrr map_dfr\n#' @importFrom tidyselect matches\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nget_subregion_vaccination_data <- function(dates = c(\"current\", \"recent\", \"all\"),\n                                           subregion_code = NULL) {\n  dates <- match.arg(dates)\n  base_url <- \"https://api.covid19tracker.ca/reports/sub-regions/\"\n  dates_path <- switch(dates,\n    current = \"summary\",\n    recent = \"recent\",\n    all = \"\"\n  )\n  url <- paste0(base_url, dates_path)\n\n  if (is.null(subregion_code)) {\n    if (dates == \"all\") {\n      stop(\"Must specify sub-region(s) to return all vaccination reports.\")\n    }\n    content_parsed <- get_content_parsed(url)\n\n    vaccination_data <- dplyr::bind_cols(\n      content_parsed[\"last_updated\"],\n      dplyr::bind_rows(content_parsed$data)\n    )\n  } else {\n    vaccination_data <- purrr::map_dfr(\n      subregion_code,\n      function(subregion_code) {\n        url <- paste0(url, subregion_code)\n        content_parsed <- get_content_parsed(url)\n\n        dplyr::bind_cols(\n          content_parsed[\"sub_region\"],\n          dplyr::bind_rows(content_parsed$data)\n        )\n      }\n    )\n  }\n\n  vaccination_data %>%\n    dplyr::mutate(\n      dplyr::across(tidyselect::matches(\"^total\"), as.integer),\n      dplyr::across(tidyselect::matches(\"^percent\"), as.numeric),\n      dplyr::across(tidyselect::matches(\"date\"), as.Date),\n      dplyr::across(tidyselect::matches(\"last_updated\"), as.POSIXct)\n    )\n}\n```\n:::\n\n\nAnother `stop` condition prevents sending too many requests: this time when all subregion data is requested.\n\n\n::: {.cell hash='canada-covid-19-data-in-r-creating-a-package_cache/html/get-subregion-vaccination-data-test_22a15a9edbe22cd06cf4fb3e80c7c26b'}\n\n```{.r .cell-code}\ntest_that(\"get_subregion_vaccination_data works\", {\n  request_sleep()\n  subregion_vaccination_data_current <- get_subregion_vaccination_data()\n  expect_equal(nrow(subregion_vaccination_data_current), 806)\n  expect_equal(ncol(subregion_vaccination_data_current), 12)\n\n  request_sleep()\n  subregion_vaccination_data_recent <-\n    get_subregion_vaccination_data(dates = \"recent\")\n  expect_true(nrow(subregion_vaccination_data_recent) > 0)\n})\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTest passed ðŸŒˆ\n```\n:::\n:::\n\n\n## Vaccine age groups\n\nThese data are week-by-week vaccination statistics for various age groups.\nThe request URL is `/vaccines/age-groups` and takes a few parameters:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"`get_vaccine_age_groups()` documentation\"}\n#' Get vaccination reports by age group\n#'\n#' Runs a GET request of vaccination data by age groups from the COVID-19\n#' tracker API, and returns parsed data.\n#' Via the `split` argument, data may be \"overall\" (all provinces/territories\n#' combined), or by \"province\".\n#' Alternatively, provide one or more two-letter codes (e.g. \"AB\") to `province`\n#' to return reports for specific provinces.\n#'\n#' @param split One of \"overall\", or \"province\" to specify how the\n#'   data is split. An \"overall\" report gives cumulative numbers across Canada.\n#'   Splitting by \"province\" returns all reports for all provinces/territories.\n#' @param province One or more province/territory codes (\"AB\", \"BC\", \"MB\", \"NB\",\n#'   \"NL\", \"NS\", \"NT\", \"NU\", \"ON\", \"PE\", \"QC\", \"SK\", \"YT\") to get reports.\n#'   Upper, lower and mixed case strings are accepted.\n#' @param group A specific age group to return, for example: \"0-4\", \"05-11\",\n#'   \"30-39\", \"80+\", \"not_reported\"\n#' @param after Returns reports from only on or after the specified date,\n#'   in YYYY-MM-DD format.\n#' @param before Returns reports from only on or before the specified date,\n#'   in YYYY-MM-DD format.\n#'\n#' @return A data frame with, one row per age group per date. Includes\n#'   a `province` variable if data is split by province.\n#' @export\n#'\n#' @examples\n#'\n#' get_vaccine_age_groups()\n#' get_vaccine_age_groups(split = \"province\")\n#' get_vaccine_age_groups(province = c(\"AB\", \"SK\"))\n#' get_vaccine_age_groups(province = \"NS\", group = \"18-29\")\n#' get_vaccine_age_groups(group = \"80+\", after = \"2021-12-01\")\n#' @importFrom dplyr bind_rows bind_cols mutate across\n#' @importFrom tidyselect matches\n#' @importFrom rlang .data\n#' @importFrom purrr imap_chr map_dfr discard\n#' @importFrom tibble lst\n#' @importFrom jsonlite fromJSON\n#' @importFrom tidyr unnest\n#' @importFrom utils URLencode\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nget_vaccine_age_groups <- function(split = c(\"overall\", \"province\"),\n                                   province = NULL,\n                                   group = NULL, before = NULL, after = NULL) {\n  base_url <- \"https://api.covid19tracker.ca/vaccines/age-groups\"\n  province_codes <- c(\n    \"AB\", \"BC\", \"MB\", \"NB\", \"NL\", \"NS\", \"NT\", \"NU\", \"ON\",\n    \"PE\", \"QC\", \"SK\", \"YT\"\n  )\n\n  split <- match.arg(split)\n  if (split == \"province\") {\n    base_url <- paste0(base_url, \"/split\")\n  } else if (!is.null(province)) {\n    province <- match.arg(toupper(province), province_codes, several.ok = TRUE)\n    base_url <- paste0(base_url, \"/province/\", province)\n  }\n\n  parameters <- tibble::lst(group, before, after)\n  # Remove NULL parameters\n  parameters <- parameters[lengths(parameters) == 1]\n  if (length(parameters) > 0) {\n    params_url <- purrr::imap_chr(\n      parameters,\n      ~ paste0(.y, \"=\", utils::URLencode(.x, reserved = TRUE))\n    ) %>%\n      paste(collapse = \"&\")\n    params_url <- paste0(\"?\", params_url)\n  } else {\n    params_url <- \"\"\n  }\n\n  purrr::map_dfr(\n    base_url,\n    function(base_url) {\n      url <- paste0(base_url, params_url)\n      content_parsed <- get_content_parsed(url)\n\n      # Because age ranges can change over time, some data returned is NULL\n      #  if the `group` param is used\n      if (!is.null(group)) {\n        # So discard NULL elements\n        content_parsed$data <- purrr::discard(content_parsed$data,\n                                              ~ is.null(.x$data))\n      }\n\n      if (!is.null(province)) {\n        dplyr::bind_cols(\n          content_parsed[\"province\"],\n          dplyr::bind_rows(content_parsed$data)\n        )\n      } else {\n        dplyr::bind_rows(content_parsed$data)\n      }\n    }\n  ) %>%\n    dplyr::mutate(\n      data = purrr::map(\n        .data$data,\n        ~jsonlite::fromJSON(.x) %>% dplyr::bind_rows(.id = \"group_code\")\n      )\n    ) %>%\n    tidyr::unnest(.data$data) %>%\n    dplyr::mutate(dplyr::across(tidyselect::matches(\"date\"), as.Date))\n}\n```\n:::\n\n\n<aside>\n\nAnd the new dependencies:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::use_package(\"tidyr\")\nusethis::use_package(\"utils\")\n```\n:::\n\n\n</aside>\n\nThere were some tricky aspects to this function, like how the content is JSON within JSON and the URL encoding for the age group parameter (see my [previous post](../2021-12-28-canada-covid-19-data-in-r-exploring-the-api/#vaccine-age-groups)).\nRun some tests:\n\n\n::: {.cell hash='canada-covid-19-data-in-r-creating-a-package_cache/html/get-vaccine-age-groups-test_9430b61cb04daed37147eb91bd71e514'}\n\n```{.r .cell-code}\ntest_that(\"get_vaccine_age_groups works\", {\n  request_sleep()\n  vacc_age_overall <- get_vaccine_age_groups()\n  expect_equal(dplyr::n_distinct(vacc_age_overall$group), 19)\n\n  request_sleep()\n  vacc_age_province <- get_vaccine_age_groups(split = \"province\")\n  expect_equal(dplyr::n_distinct(vacc_age_province$province), 13)\n\n  request_sleep()\n  vacc_age_mb_nt <- get_vaccine_age_groups(province = c(\"test\", \"mB\", \"NT\"))\n  expect_setequal(unique(vacc_age_mb_nt$province), c(\"MB\", \"NT\"))\n\n  request_sleep()\n  vacc_age_ns_18_29 <- get_vaccine_age_groups(province = \"NS\", group = \"18-29\")\n  expect_setequal(unique(vacc_age_ns_18_29$province), c(\"NS\"))\n  expect_setequal(unique(vacc_age_ns_18_29$group), c(\"18-29\"))\n\n  request_sleep()\n  vacc_age_80p_date_range <-\n    get_vaccine_age_groups(group = \"80+\",\n                           after = \"2021-03-20\", before = \"2021-05-10\")\n  expect_equal(unique(vacc_age_80p_date_range$group), \"80+\")\n  expect_true(min(vacc_age_80p_date_range$date) >= \"2021-03-20\")\n  expect_true(max(vacc_age_80p_date_range$date) <= \"2021-05-10\")\n\n  request_sleep()\n  vacc_age_not_reported <- get_vaccine_age_groups(group = \"not_reported\")\n  expect_equal(unique(vacc_age_not_reported$group), \"Not reported\")\n\n  request_sleep()\n  expect_error(get_vaccine_age_groups(group = \"90+\"))\n})\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTest passed ðŸ¥³\n```\n:::\n:::\n\n\n## Regions and sub-regions\n\nHealth regions from `get_summary` and `get_reports` are specified by the non-descript `hr_uid` variable only.\nAlso, the sub-regions from `get_subregion_vaccination_data` are specified by `code` only.\nNaturally, the API provides lists of regions and sub-regions, which I wrap with two new functions in the `regions.R` file:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::use_r(\"regions\")\nusethis::use_test(\"regions\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#' Get health regions\n#'\n#' Returns a list of health regions in the COVID-19 tracker.\n#' By default (`hr_uid` and `province` `NULL`), returns all 92 regions.\n#'\n#' @param hr_uid One or more health region UIDs (e.g. 3553) to return.\n#' @param province One or more provinces to return.\n#'\n#' @return A data frame with a row per health region.\n#' @export\n#'\n#' @examples\n#'\n#' get_regions()\n#' get_regions(hr_uid = c(\"2414\", 591))\n#' get_regions(province = c(\"ns\", \"SK\"))\n#' @importFrom dplyr bind_rows\n#' @importFrom purrr map_dfr\nget_regions <- function(hr_uid = NULL, province = NULL) {\n  base_url <- \"https://api.covid19tracker.ca/\"\n  if (!is.null(hr_uid)) {\n    url <- paste0(base_url, \"regions/\", hr_uid)\n  } else if (!is.null(province)) {\n    url <- paste0(base_url, \"province/\", province, \"/regions\")\n  } else {\n    url <- paste0(base_url, \"regions\")\n  }\n\n  purrr::map_dfr(\n    url,\n    function(url) {\n      content_parsed <- get_content_parsed(url)\n      if (!is.null(province)) {\n        dplyr::bind_rows(content_parsed)\n      } else {\n        dplyr::bind_rows(content_parsed$data)\n      }\n    }\n  )\n}\n\n#' Get sub-regions\n#'\n#' Returns a list of sub-regions in the COVID-19 tracker.\n#' By default, returns all 805 sub-regions.\n#'\n#' @param subregion_code One or more sub-regions to be returned.\n#'\n#' @return A data frame with a row per sub-region.\n#' @export\n#'\n#' @examples\n#'\n#' get_subregions()\n#' get_subregions(\"AB001\")\n#' get_subregions(c(\"SK003\", \"SK005\"))\n#' @importFrom dplyr bind_rows\n#' @importFrom purrr map_dfr\nget_subregions <- function(subregion_code = NULL) {\n  base_url <- \"https://api.covid19tracker.ca/sub-regions\"\n\n  if (is.null(subregion_code)) {\n    url <- base_url\n  } else {\n    url <- paste0(base_url, \"/\", subregion_code)\n  }\n\n  purrr::map_dfr(\n    url,\n    function(url) {\n      content_parsed <- get_content_parsed(url)\n      dplyr::bind_rows(content_parsed$data)\n    }\n  )\n}\n```\n:::\n\n\nNot very complicated, and neither are the corresponding tests:\n\n\n::: {.cell hash='canada-covid-19-data-in-r-creating-a-package_cache/html/get-regions-test_d1d00bcc288ff17a442ded5b54d9c69d'}\n\n```{.r .cell-code}\ntest_that(\"get_regions works\", {\n  request_sleep()\n  regions <- get_regions()\n  expect_true(\"hr_uid\" %in% names(regions))\n  expect_equal(nrow(regions), 92)\n  expect_equal(dplyr::n_distinct(regions$province), 13)\n\n  request_sleep()\n  regions_2418_3534 <- get_regions(hr_uid = c(2418, \"3534\"))\n  expect_equal(regions_2418_3534$hr_uid, c(2418, 3534))\n\n  request_sleep()\n  regions_mb_bc <- get_regions(province = c(\"mb\", \"bC\"))\n  expect_equal(unique(regions_mb_bc$province), c(\"MB\", \"BC\"))\n})\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTest passed ðŸ˜¸\n```\n:::\n\n```{.r .cell-code}\ntest_that(\"get_subregions works\", {\n  request_sleep()\n  subregions <- get_subregions()\n  expect_equal(nrow(subregions), 806)\n  expect_equal(dplyr::n_distinct(subregions$province), 6)\n\n  request_sleep()\n  subregions_3 <- get_subregions(c(\"ON322\", \"SK010\", \"MB029\", \"test\"))\n  expect_setequal(unique(subregions_3$province), c(\"ON\", \"SK\", \"MB\"))\n})\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTest passed ðŸ˜¸\n```\n:::\n:::\n\n\n## Provinces\n\nThe last function I added to the package is `get_provinces`, which has some population/geographical data, as well as a [`data_status` variable indicating if a province's daily numbers have been updated](https://tdunn.ca/posts/2021-12-28-canada-covid-19-data-in-r-exploring-the-api/#provinces):\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#' Get provinces and territories\n#'\n#' @param geo_only Logical, indicating if only provinces/territories should be\n#'   returned. If FALSE, also returned non-geographic entities like\n#'   Repatriated Canadians and the Federal Allocation for vaccinations.\n#'\n#' @return A data frame with a row per province/territory.\n#' @export\n#'\n#' @examples\n#'\n#' get_provinces()\n#' get_provinces(geo_only = FALSE)\n#' @importFrom dplyr bind_rows mutate\n#' @importFrom rlang .data\nget_provinces <- function(geo_only = TRUE) {\n  base_url <- \"https://api.covid19tracker.ca/provinces\"\n  if (geo_only) {\n    api_params <- \"?geo_only=true\"\n  } else {\n    api_params <- \"\"\n  }\n  url <- paste0(base_url, api_params)\n\n  content_parsed <- get_content_parsed(url)\n\n  dplyr::bind_rows(content_parsed) %>%\n    dplyr::mutate(\n      # Use logical type instead of 0/1\n      geographic = .data$geographic == 1,\n      updated_at = as.POSIXct(.data$updated_at)\n    )\n}\n```\n:::\n\n::: {.cell hash='canada-covid-19-data-in-r-creating-a-package_cache/html/get-province-test_ddac8249eedb14cd4a89d266c7298c61'}\n\n```{.r .cell-code}\ntest_that(\"get_provinces\", {\n  request_sleep()\n  provinces <- get_provinces()\n  expect_equal(nrow(provinces), 13)\n  expect_equal(ncol(provinces), 10)\n  expect_setequal(provinces$code,\n                  c(\"ON\", \"QC\", \"NS\", \"NB\", \"MB\", \"BC\", \"PE\", \"SK\", \"AB\",\n                    \"NL\", \"NT\", \"YT\", \"NU\"))\n\n  request_sleep()\n  provinces_geo_false <- get_provinces(geo_only = FALSE)\n\n  expect_equal(nrow(provinces_geo_false), 16)\n  expect_equal(ncol(provinces_geo_false), 10)\n  expect_setequal(provinces_geo_false$code,\n                  c(\"ON\", \"QC\", \"NS\", \"NB\", \"MB\", \"BC\", \"PE\", \"SK\", \"AB\",\n                    \"NL\", \"NT\", \"YT\", \"NU\",\n                    \"_RC\", \"FA\", \"NFR\"))\n\n})\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTest passed ðŸ¥‡\n```\n:::\n:::\n\n\n## An example use case\n\nNow with the package up-and-running on GitHub, I'll install it with:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nremotes::install_github(\"taylordunn/canadacovid\")\n```\n:::\n\n\nGet cases per day across Canada, and compute a 7-day rolling average:\n\n\n::: {.cell hash='canada-covid-19-data-in-r-creating-a-package_cache/html/reports-overall_71a8e4c55638269d2c27f43004473b88'}\n\n```{.r .cell-code}\nreports_overall <- canadacovid::get_reports() %>%\n  mutate(\n    date, change_cases,\n    change_cases_rolling_avg = zoo::rollapply(change_cases, 7, mean,\n                                              align = \"right\", fill = NA)\n  )\n```\n:::\n\n::: {.cell}\n\n:::\n\n\nMake a plot of the cases:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncanada_red <- \"#FF0000\"\ncanada_red_desat <- \"#bf3f3f\"\np_title <- glue::glue(\n  \"COVID-19 cases reported per day in Canada (with \",\n  \"<span style='color:{canada_red}'>7-day rolling average</span>)\"\n)\n\nreports_overall %>%\n  ggplot(aes(x = date, y = change_cases)) +\n  geom_col(aes(y = change_cases), fill = canada_red, alpha = 0.5, width = 1) +\n  geom_line(aes(y = change_cases_rolling_avg),\n            color = canada_red, size = 2) +\n  scale_y_continuous(expand = c(0, 0), labels = scales::comma) +\n  labs(y = \"Cases\", x = \"Date\", title = p_title) +\n  theme(plot.title = ggtext::element_markdown())\n```\n\n::: {.cell-output-display}\n![](canada-covid-19-data-in-r-creating-a-package_files/figure-html/unnamed-chunk-38-1.png){width=672}\n:::\n:::\n\n\n\n\n## Hex sticker\n\nTo represent the package, I'll quickly put together a hex sticker based on the above plot.\nI'm no artist, so I'll use the `hexSticker` package to make it.\n\nFirst iteration of the plot:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Use data from before the omicron peak, which (sadly) extends the y axis a lot\nd <- reports_overall %>%\n  filter(date < \"2021-12-01\", !is.na(change_cases_rolling_avg))\np <- d %>%\n  ggplot(aes(x = date, y = change_cases_rolling_avg)) +\n  geom_ribbon(aes(ymin = 0, ymax = change_cases_rolling_avg),\n              fill = canada_red, alpha = 0.5) +\n  geom_line(color = canada_red, size = 1.5) +\n  dunnr::remove_axis(\"y\") +\n  labs(x = NULL)\np\n```\n\n::: {.cell-output-display}\n![](canada-covid-19-data-in-r-creating-a-package_files/figure-html/unnamed-chunk-40-1.png){width=672}\n:::\n:::\n\n\nFor some extra visual interest, I'll mark the peaks in the plot.\nMy lazy approach for finding those days is to first roughly group the data into waves:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwaves <- as.Date(c(\"2020-03-01\", \"2020-07-01\", \"2021-03-01\",\n                   \"2021-07-15\", \"2021-11-01\"))\np + geom_vline(xintercept = waves)\n```\n\n::: {.cell-output-display}\n![](canada-covid-19-data-in-r-creating-a-package_files/figure-html/unnamed-chunk-41-1.png){width=672}\n:::\n:::\n\n\nThen find the maximum case count in each wave:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npeaks <- d %>%\n  mutate(wave = cut(date, breaks = waves, labels = paste0(\"wave \", 1:4))) %>%\n  filter(!is.na(wave)) %>%\n  group_by(wave) %>%\n  filter(change_cases_rolling_avg == max(change_cases_rolling_avg)) %>%\n  ungroup() %>%\n  select(wave, date, change_cases, change_cases_rolling_avg)\npeaks\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 Ã— 4\n  wave   date       change_cases change_cases_rolling_avg\n  <fct>  <date>            <int>                    <dbl>\n1 wave 1 2020-05-03         2794                    1795.\n2 wave 2 2021-01-10         8324                    8260.\n3 wave 3 2021-04-17         8866                    8730.\n4 wave 4 2021-09-17         5061                    4445.\n```\n:::\n:::\n\n\nNow add these as white horizontal lines on the plot:\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- p +\n  geom_vline(xintercept = peaks$date, color = \"white\", size = 1) +\n  # Re-draw the line so that it appears over the white lines\n  geom_line(color = canada_red, size = 1.5)\np\n```\n\n::: {.cell-output-display}\n![](canada-covid-19-data-in-r-creating-a-package_files/figure-html/unnamed-chunk-43-1.png){width=672}\n:::\n:::\n\n\nRemove un-needed elements from the plot:\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- p +\n  scale_y_continuous(expand = c(0, 0)) +\n  theme(\n    plot.margin = margin(t = 0, r = 0, b = 0, l = 0),\n    axis.text.x = element_blank(),\n    axis.line.x = element_line(size = 1),\n    axis.ticks.x = element_blank()\n  )\np\n```\n\n::: {.cell-output-display}\n![](canada-covid-19-data-in-r-creating-a-package_files/figure-html/unnamed-chunk-44-1.png){width=672}\n:::\n:::\n\n\nFinally, put it into a `hexSticker` and save the image:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Save the figure separately so I can control the size\nggsave(\"hex-plot.png\", plot = p, width = 10, height = 5, dpi = 500)\n\nlibrary(hexSticker)\nsysfonts::font_add_google(\"Inter\")\nshowtext::showtext_auto()\n\ncanada_red_a0.5 <- grDevices::adjustcolor(canada_red, alpha.f = 0.5)\n\nhexSticker::sticker(\n  subplot = \"hex-plot.png\", s_width = 0.7, s_x = 1.0, s_y = 0.8,\n  package = \"canadacovid\",\n  p_family = \"Inter\", p_size = 30, p_color = canada_red,\n  h_fill = \"white\", h_color = canada_red_a0.5,\n  filename = \"canadacovid-sticker.png\", dpi = 500\n)\n```\n:::\n\n\n![](images/canadacovid-sticker.png){width=40% fig-align=\"center\"}\n\nNot bad. Not great.\n\n## Reproducibility {.appendix .unlisted}\n\n<details><summary>Session info</summary>\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n setting  value\n version  R version 4.2.1 (2022-06-23 ucrt)\n os       Windows 10 x64 (build 19044)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  English_Canada.utf8\n ctype    English_Canada.utf8\n tz       America/Curacao\n date     2022-08-22\n pandoc   2.18 @ C:/Program Files/RStudio/bin/quarto/bin/tools/ (via rmarkdown)\n```\n:::\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"package\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"ondiskversion\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"loadedversion\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"path\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"loadedpath\"],\"name\":[5],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"attached\"],\"name\":[6],\"type\":[\"lgl\"],\"align\":[\"right\"]},{\"label\":[\"is_base\"],\"name\":[7],\"type\":[\"lgl\"],\"align\":[\"right\"]},{\"label\":[\"date\"],\"name\":[8],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"source\"],\"name\":[9],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"md5ok\"],\"name\":[10],\"type\":[\"lgl\"],\"align\":[\"right\"]},{\"label\":[\"library\"],\"name\":[11],\"type\":[\"fct\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"assertthat\",\"2\":\"0.2.1\",\"3\":\"0.2.1\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/assertthat\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/assertthat\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2019-03-21\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"assertthat\"},{\"1\":\"backports\",\"2\":\"1.4.1\",\"3\":\"1.4.1\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/backports\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/backports\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2021-12-13\",\"9\":\"CRAN (R 4.2.0)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"backports\"},{\"1\":\"brio\",\"2\":\"1.1.3\",\"3\":\"1.1.3\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/brio\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/brio\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2021-11-30\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"brio\"},{\"1\":\"broom\",\"2\":\"1.0.0\",\"3\":\"1.0.0\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/broom\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/broom\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-07-01\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"broom\"},{\"1\":\"cachem\",\"2\":\"1.0.6\",\"3\":\"1.0.6\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/cachem\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/cachem\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2021-08-19\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"cachem\"},{\"1\":\"callr\",\"2\":\"3.7.1\",\"3\":\"3.7.1\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/callr\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/callr\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-07-13\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"callr\"},{\"1\":\"cellranger\",\"2\":\"1.1.0\",\"3\":\"1.1.0\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/cellranger\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/cellranger\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2016-07-27\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"cellranger\"},{\"1\":\"cli\",\"2\":\"3.3.0\",\"3\":\"3.3.0\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/cli\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/cli\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-04-25\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"cli\"},{\"1\":\"colorspace\",\"2\":\"2.0.3\",\"3\":\"2.0-3\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/colorspace\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/colorspace\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-02-21\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"colorspace\"},{\"1\":\"crayon\",\"2\":\"1.5.1\",\"3\":\"1.5.1\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/crayon\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/crayon\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-03-26\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"crayon\"},{\"1\":\"DBI\",\"2\":\"1.1.3\",\"3\":\"1.1.3\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/DBI\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/DBI\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-06-18\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"DBI\"},{\"1\":\"dbplyr\",\"2\":\"2.2.1\",\"3\":\"2.2.1\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/dbplyr\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/dbplyr\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-06-27\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"dbplyr\"},{\"1\":\"devtools\",\"2\":\"2.4.4\",\"3\":\"2.4.4\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/devtools\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/devtools\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-07-20\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"devtools\"},{\"1\":\"digest\",\"2\":\"0.6.29\",\"3\":\"0.6.29\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/digest\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/digest\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2021-12-01\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"digest\"},{\"1\":\"distill\",\"2\":\"1.4\",\"3\":\"1.4\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/distill\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/distill\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-05-12\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"distill\"},{\"1\":\"downlit\",\"2\":\"0.4.2\",\"3\":\"0.4.2\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/downlit\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/downlit\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-07-05\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"downlit\"},{\"1\":\"dplyr\",\"2\":\"1.0.9\",\"3\":\"1.0.9\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/dplyr\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/dplyr\",\"6\":\"TRUE\",\"7\":\"FALSE\",\"8\":\"2022-04-28\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"dplyr\"},{\"1\":\"dunnr\",\"2\":\"0.2.6\",\"3\":\"0.2.6\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/dunnr\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/dunnr\",\"6\":\"TRUE\",\"7\":\"FALSE\",\"8\":\"2022-08-07\",\"9\":\"Github (taylordunn/dunnr@e2a82136012b9edae43fc5f8e728492125366267)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"dunnr\"},{\"1\":\"ellipsis\",\"2\":\"0.3.2\",\"3\":\"0.3.2\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/ellipsis\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/ellipsis\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2021-04-29\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"ellipsis\"},{\"1\":\"evaluate\",\"2\":\"0.15\",\"3\":\"0.15\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/evaluate\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/evaluate\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-02-18\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"evaluate\"},{\"1\":\"extrafont\",\"2\":\"0.18\",\"3\":\"0.18\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/extrafont\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/extrafont\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-04-12\",\"9\":\"CRAN (R 4.2.0)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"extrafont\"},{\"1\":\"extrafontdb\",\"2\":\"1.0\",\"3\":\"1.0\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/extrafontdb\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/extrafontdb\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2012-06-11\",\"9\":\"CRAN (R 4.2.0)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"extrafontdb\"},{\"1\":\"fansi\",\"2\":\"1.0.3\",\"3\":\"1.0.3\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/fansi\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/fansi\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-03-24\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"fansi\"},{\"1\":\"farver\",\"2\":\"2.1.1\",\"3\":\"2.1.1\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/farver\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/farver\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-07-06\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"farver\"},{\"1\":\"fastmap\",\"2\":\"1.1.0\",\"3\":\"1.1.0\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/fastmap\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/fastmap\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2021-01-25\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"fastmap\"},{\"1\":\"forcats\",\"2\":\"0.5.1\",\"3\":\"0.5.1\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/forcats\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/forcats\",\"6\":\"TRUE\",\"7\":\"FALSE\",\"8\":\"2021-01-27\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"forcats\"},{\"1\":\"fs\",\"2\":\"1.5.2\",\"3\":\"1.5.2\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/fs\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/fs\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2021-12-08\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"fs\"},{\"1\":\"gargle\",\"2\":\"1.2.0\",\"3\":\"1.2.0\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/gargle\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/gargle\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2021-07-02\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"gargle\"},{\"1\":\"generics\",\"2\":\"0.1.3\",\"3\":\"0.1.3\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/generics\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/generics\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-07-05\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"generics\"},{\"1\":\"ggplot2\",\"2\":\"3.3.6\",\"3\":\"3.3.6\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/ggplot2\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/ggplot2\",\"6\":\"TRUE\",\"7\":\"FALSE\",\"8\":\"2022-05-03\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"ggplot2\"},{\"1\":\"ggrepel\",\"2\":\"0.9.1\",\"3\":\"0.9.1\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/ggrepel\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/ggrepel\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2021-01-15\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"ggrepel\"},{\"1\":\"ggtext\",\"2\":\"0.1.1\",\"3\":\"0.1.1\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/ggtext\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/ggtext\",\"6\":\"TRUE\",\"7\":\"FALSE\",\"8\":\"2020-12-17\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"ggtext\"},{\"1\":\"glue\",\"2\":\"1.6.2\",\"3\":\"1.6.2\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/glue\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/glue\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-02-24\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"glue\"},{\"1\":\"googledrive\",\"2\":\"2.0.0\",\"3\":\"2.0.0\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/googledrive\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/googledrive\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2021-07-08\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"googledrive\"},{\"1\":\"googlesheets4\",\"2\":\"1.0.0\",\"3\":\"1.0.0\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/googlesheets4\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/googlesheets4\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2021-07-21\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"googlesheets4\"},{\"1\":\"gridtext\",\"2\":\"0.1.4\",\"3\":\"0.1.4\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/gridtext\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/gridtext\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2020-12-10\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"gridtext\"},{\"1\":\"gtable\",\"2\":\"0.3.0\",\"3\":\"0.3.0\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/gtable\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/gtable\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2019-03-25\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"gtable\"},{\"1\":\"haven\",\"2\":\"2.5.0\",\"3\":\"2.5.0\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/haven\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/haven\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-04-15\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"haven\"},{\"1\":\"hms\",\"2\":\"1.1.1\",\"3\":\"1.1.1\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/hms\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/hms\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2021-09-26\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"hms\"},{\"1\":\"htmltools\",\"2\":\"0.5.2\",\"3\":\"0.5.2\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/htmltools\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/htmltools\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2021-08-25\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"NA\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"htmltools\"},{\"1\":\"htmlwidgets\",\"2\":\"1.5.4\",\"3\":\"1.5.4\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/htmlwidgets\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/htmlwidgets\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2021-09-08\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"htmlwidgets\"},{\"1\":\"httpuv\",\"2\":\"1.6.5\",\"3\":\"1.6.5\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/httpuv\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/httpuv\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-01-05\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"httpuv\"},{\"1\":\"httr\",\"2\":\"1.4.3\",\"3\":\"1.4.3\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/httr\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/httr\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-05-04\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"httr\"},{\"1\":\"jsonlite\",\"2\":\"1.8.0\",\"3\":\"1.8.0\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/jsonlite\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/jsonlite\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-02-22\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"jsonlite\"},{\"1\":\"knitr\",\"2\":\"1.39\",\"3\":\"1.39\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/knitr\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/knitr\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-04-26\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"knitr\"},{\"1\":\"labeling\",\"2\":\"0.4.2\",\"3\":\"0.4.2\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/labeling\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/labeling\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2020-10-20\",\"9\":\"CRAN (R 4.2.0)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"labeling\"},{\"1\":\"later\",\"2\":\"1.3.0\",\"3\":\"1.3.0\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/later\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/later\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2021-08-18\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"later\"},{\"1\":\"lifecycle\",\"2\":\"1.0.1\",\"3\":\"1.0.1\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/lifecycle\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/lifecycle\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2021-09-24\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"lifecycle\"},{\"1\":\"lubridate\",\"2\":\"1.8.0\",\"3\":\"1.8.0\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/lubridate\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/lubridate\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2021-10-07\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"lubridate\"},{\"1\":\"magrittr\",\"2\":\"2.0.3\",\"3\":\"2.0.3\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/magrittr\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/magrittr\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-03-30\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"magrittr\"},{\"1\":\"markdown\",\"2\":\"1.1\",\"3\":\"1.1\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/markdown\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/markdown\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2019-08-07\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"markdown\"},{\"1\":\"memoise\",\"2\":\"2.0.1\",\"3\":\"2.0.1\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/memoise\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/memoise\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2021-11-26\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"memoise\"},{\"1\":\"mime\",\"2\":\"0.12\",\"3\":\"0.12\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/mime\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/mime\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2021-09-28\",\"9\":\"CRAN (R 4.2.0)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"mime\"},{\"1\":\"miniUI\",\"2\":\"0.1.1.1\",\"3\":\"0.1.1.1\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/miniUI\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/miniUI\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2018-05-18\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"miniUI\"},{\"1\":\"modelr\",\"2\":\"0.1.8\",\"3\":\"0.1.8\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/modelr\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/modelr\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2020-05-19\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"modelr\"},{\"1\":\"munsell\",\"2\":\"0.5.0\",\"3\":\"0.5.0\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/munsell\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/munsell\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2018-06-12\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"munsell\"},{\"1\":\"pillar\",\"2\":\"1.8.0\",\"3\":\"1.8.0\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/pillar\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/pillar\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-07-18\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"pillar\"},{\"1\":\"pkgbuild\",\"2\":\"1.3.1\",\"3\":\"1.3.1\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/pkgbuild\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/pkgbuild\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2021-12-20\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"pkgbuild\"},{\"1\":\"pkgconfig\",\"2\":\"2.0.3\",\"3\":\"2.0.3\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/pkgconfig\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/pkgconfig\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2019-09-22\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"pkgconfig\"},{\"1\":\"pkgload\",\"2\":\"1.3.0\",\"3\":\"1.3.0\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/pkgload\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/pkgload\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-06-27\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"pkgload\"},{\"1\":\"prettyunits\",\"2\":\"1.1.1\",\"3\":\"1.1.1\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/prettyunits\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/prettyunits\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2020-01-24\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"prettyunits\"},{\"1\":\"processx\",\"2\":\"3.7.0\",\"3\":\"3.7.0\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/processx\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/processx\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-07-07\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"processx\"},{\"1\":\"profvis\",\"2\":\"0.3.7\",\"3\":\"0.3.7\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/profvis\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/profvis\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2020-11-02\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"profvis\"},{\"1\":\"promises\",\"2\":\"1.2.0.1\",\"3\":\"1.2.0.1\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/promises\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/promises\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2021-02-11\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"promises\"},{\"1\":\"ps\",\"2\":\"1.7.1\",\"3\":\"1.7.1\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/ps\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/ps\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-06-18\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"ps\"},{\"1\":\"purrr\",\"2\":\"0.3.4\",\"3\":\"0.3.4\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/purrr\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/purrr\",\"6\":\"TRUE\",\"7\":\"FALSE\",\"8\":\"2020-04-17\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"purrr\"},{\"1\":\"R6\",\"2\":\"2.5.1\",\"3\":\"2.5.1\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/R6\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/R6\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2021-08-19\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"R6\"},{\"1\":\"ragg\",\"2\":\"1.2.2\",\"3\":\"1.2.2\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/ragg\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/ragg\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-02-21\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"ragg\"},{\"1\":\"Rcpp\",\"2\":\"1.0.9\",\"3\":\"1.0.9\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/Rcpp\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/Rcpp\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-07-08\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"Rcpp\"},{\"1\":\"readr\",\"2\":\"2.1.2\",\"3\":\"2.1.2\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/readr\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/readr\",\"6\":\"TRUE\",\"7\":\"FALSE\",\"8\":\"2022-01-30\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"readr\"},{\"1\":\"readxl\",\"2\":\"1.4.0\",\"3\":\"1.4.0\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/readxl\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/readxl\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-03-28\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"readxl\"},{\"1\":\"remotes\",\"2\":\"2.4.2\",\"3\":\"2.4.2\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/remotes\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/remotes\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2021-11-30\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"remotes\"},{\"1\":\"renv\",\"2\":\"0.15.5\",\"3\":\"0.15.5\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/renv\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/renv\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-05-26\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"renv\"},{\"1\":\"reprex\",\"2\":\"2.0.1\",\"3\":\"2.0.1\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/reprex\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/reprex\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2021-08-05\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"reprex\"},{\"1\":\"rlang\",\"2\":\"1.0.4\",\"3\":\"1.0.4\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/rlang\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/rlang\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-07-12\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"rlang\"},{\"1\":\"rmarkdown\",\"2\":\"2.14\",\"3\":\"2.14\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/rmarkdown\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/rmarkdown\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-04-25\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"rmarkdown\"},{\"1\":\"rstudioapi\",\"2\":\"0.13\",\"3\":\"0.13\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/rstudioapi\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/rstudioapi\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2020-11-12\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"rstudioapi\"},{\"1\":\"Rttf2pt1\",\"2\":\"1.3.8\",\"3\":\"1.3.8\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/Rttf2pt1\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/Rttf2pt1\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2020-01-10\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"Rttf2pt1\"},{\"1\":\"rvest\",\"2\":\"1.0.2\",\"3\":\"1.0.2\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/rvest\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/rvest\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2021-10-16\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"rvest\"},{\"1\":\"scales\",\"2\":\"1.2.0\",\"3\":\"1.2.0\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/scales\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/scales\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-04-13\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"scales\"},{\"1\":\"sessioninfo\",\"2\":\"1.2.2\",\"3\":\"1.2.2\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/sessioninfo\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/sessioninfo\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2021-12-06\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"sessioninfo\"},{\"1\":\"shiny\",\"2\":\"1.7.2\",\"3\":\"1.7.2\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/shiny\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/shiny\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-07-19\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"shiny\"},{\"1\":\"stringi\",\"2\":\"1.7.8\",\"3\":\"1.7.8\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/stringi\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/stringi\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-07-11\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"stringi\"},{\"1\":\"stringr\",\"2\":\"1.4.0\",\"3\":\"1.4.0\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/stringr\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/stringr\",\"6\":\"TRUE\",\"7\":\"FALSE\",\"8\":\"2019-02-10\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"stringr\"},{\"1\":\"systemfonts\",\"2\":\"1.0.4\",\"3\":\"1.0.4\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/systemfonts\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/systemfonts\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-02-11\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"systemfonts\"},{\"1\":\"testthat\",\"2\":\"3.1.4\",\"3\":\"3.1.4\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/testthat\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/testthat\",\"6\":\"TRUE\",\"7\":\"FALSE\",\"8\":\"2022-04-26\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"testthat\"},{\"1\":\"textshaping\",\"2\":\"0.3.6\",\"3\":\"0.3.6\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/textshaping\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/textshaping\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2021-10-13\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"textshaping\"},{\"1\":\"tibble\",\"2\":\"3.1.8\",\"3\":\"3.1.8\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/tibble\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/tibble\",\"6\":\"TRUE\",\"7\":\"FALSE\",\"8\":\"2022-07-22\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"tibble\"},{\"1\":\"tidyr\",\"2\":\"1.2.0\",\"3\":\"1.2.0\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/tidyr\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/tidyr\",\"6\":\"TRUE\",\"7\":\"FALSE\",\"8\":\"2022-02-01\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"tidyr\"},{\"1\":\"tidyselect\",\"2\":\"1.1.2\",\"3\":\"1.1.2\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/tidyselect\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/tidyselect\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-02-21\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"tidyselect\"},{\"1\":\"tidyverse\",\"2\":\"1.3.2\",\"3\":\"1.3.2\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/tidyverse\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/tidyverse\",\"6\":\"TRUE\",\"7\":\"FALSE\",\"8\":\"2022-07-18\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"tidyverse\"},{\"1\":\"tzdb\",\"2\":\"0.3.0\",\"3\":\"0.3.0\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/tzdb\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/tzdb\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-03-28\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"tzdb\"},{\"1\":\"urlchecker\",\"2\":\"1.0.1\",\"3\":\"1.0.1\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/urlchecker\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/urlchecker\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2021-11-30\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"urlchecker\"},{\"1\":\"usethis\",\"2\":\"2.1.6\",\"3\":\"2.1.6\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/usethis\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/usethis\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-05-25\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"usethis\"},{\"1\":\"utf8\",\"2\":\"1.2.2\",\"3\":\"1.2.2\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/utf8\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/utf8\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2021-07-24\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"utf8\"},{\"1\":\"vctrs\",\"2\":\"0.4.1\",\"3\":\"0.4.1\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/vctrs\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/vctrs\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-04-13\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"vctrs\"},{\"1\":\"withr\",\"2\":\"2.5.0\",\"3\":\"2.5.0\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/withr\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/withr\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-03-03\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"withr\"},{\"1\":\"xfun\",\"2\":\"0.31\",\"3\":\"0.31\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/xfun\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/xfun\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-05-10\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"xfun\"},{\"1\":\"xml2\",\"2\":\"1.3.3\",\"3\":\"1.3.3\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/xml2\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/xml2\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2021-11-30\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"xml2\"},{\"1\":\"xtable\",\"2\":\"1.8.4\",\"3\":\"1.8-4\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/xtable\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/xtable\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2019-04-21\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"xtable\"},{\"1\":\"yaml\",\"2\":\"2.3.5\",\"3\":\"2.3.5\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/yaml\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/yaml\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-02-21\",\"9\":\"CRAN (R 4.2.0)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"yaml\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n</details>\n\n<details><summary>Git repository</summary>\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nLocal:    main C:/Users/tdunn/Documents/tdunn-quarto\nRemote:   main @ origin (https://github.com/taylordunn/tdunn-quarto.git)\nHead:     [0b35ed3] 2022-08-22: Added `tidytuesday-2022-week-12` post\n```\n:::\n:::\n\n\n</details>\n\n\n<a href=\"https://github.com/taylordunn/tdunn-quarto/tree/main/posts/2021-12-30-canada-covid-19-data-in-r-creating-a-package\">Source code</a>, <a href=\"https://github.com/taylordunn/tdunn-quarto/tree/main/posts/2021-12-30-canada-covid-19-data-in-r-creating-a-package/renv.lock\">R environment</a>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}