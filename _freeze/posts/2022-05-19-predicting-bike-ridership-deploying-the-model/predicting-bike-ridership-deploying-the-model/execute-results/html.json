{
  "hash": "6262cfa8ca6f7f7cbabd437fdefce66f",
  "result": {
    "markdown": "---\ntitle: \"Predicting bike ridership: deploying the model\"\ndescription: |\n  Part 3 of predicting bike ridership in Halifax, Nova Scotia. In this post,\n  I deploy the machine learning model on Google Cloud Platform.\ndate: 2022-05-19\nparams:\n  date: 2022-05-19\n  slug: \"predicting-bike-ridership-deploying-the-model\"\ncategories:\n  - R\n  - machine learning\n  - tidymodels\n  - XGBoost\n  - Google Cloud Platform\n  - Docker\n  - Shiny\n  - forecasting\n  - MLOps\npreview: preview.png\n---\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"R setup\"}\nlibrary(tidyverse)\nlibrary(httr)\n\nlibrary(dunnr)\nextrafont::loadfonts(device = \"win\", quiet = TRUE)\ntheme_set(theme_td())\nset_geom_fonts()\nset_palette()\n```\n:::\n\n\n## Introduction\n\nThis is the last in a series of posts about predicting bike ridership in Halifax.\nPreviously I:\n\n* [retrieved and prepared bicycle counter and weather data](../2022-04-27-predicting-bike-ridership-getting-the-data), then\n* [developed and evaluated different machine learning models](../2022-04-29-predicting-bike-ridership-developing-a-model).\n\nHere, I will walk through my steps of putting the model into \"production\" on Google Cloud Platform (GCP):\n\n* deploying an ETL pipeline with BigQuery and Cloud Scheduler,\n* automating model training with Cloud Run and Pub/Sub,\n* serving predictions with a REST API via the `plumber` package ([try it out here](https://hfx-bike-ridership-api-74govvz7xq-uc.a.run.app/__docs__/)), and\n* developing a Shiny app for visualizing predictions ([try it out here](https://hfx-bike-ridership-app-74govvz7xq-uc.a.run.app/)).\n\nThe source code for everything, including the Dockerfiles, can be found [on GitHub here](https://github.com/taylordunn/hfx-bike-ridership).\n\n## Creating the project\n\nBefore anything, I had to create and set up a new project on GCP that I called `hfx-bike-ridership`.\nIn addition to the very detailed GCP documentation, there are lots of great resources out there to walk through all the steps, like [this one](https://arbenkqiku.github.io/create-docker-image-with-r-and-deploy-as-cron-job-on-google-cloud).\nIn brief: after creating the project, I had to enable billing on the project, activate various APIs, create credentials (OAuth client and service account), and install the Cloud SDK.\n\n## ETL pipeline\n\nI next set up the ETL (extract, transform, load) pipeline to automatically extract the raw data from their sources, perform some transformations, and load it into a database.\n\nIn BigQuery, I created the `bike_counts` and `weather` data sets:\n\n<center>\n\n![](images/etl1.PNG){width=50%}\n\n</center>\n\nI then wrote a script [`etl.R`](https://github.com/taylordunn/hfx-bike-ridership/blob/main/etl/etl.R) that retrieves and processes bike counter data from the Halifax open data platform, and weather data from the government of Canada.\nMost of the code there is copied from [my previous post](https://tdunn.ca/posts/2022-04-27-predicting-bike-ridership-getting-the-data/), except for the lines at the end to upload the data to BigQuery tables:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbq_auth(\"oauth-client.json\")\n\nproject <- \"hfx-bike-ridership\"\n\ndaily_counts_table <- bq_table(project, \"bike_counts\", \"daily_counts\")\nweather_table <- bq_table(project, \"weather\", \"daily_report\")\n\nbq_table_upload(daily_counts_table,\n                value = bike_counts_daily, fields = bike_counts_daily,\n                create_disposition = \"CREATE_IF_NEEDED\",\n                write_disposition = \"WRITE_TRUNCATE\")\n\nbq_table_upload(weather_table,\n                value = climate_report_daily, fields = climate_report_daily,\n                create_disposition = \"CREATE_IF_NEEDED\",\n                write_disposition = \"WRITE_TRUNCATE\")\n```\n:::\n\n\nThis uses the `bigrquery` package to authenticate (`bq_auth()`) using my OAuth credentials and upload (`bq_table_upload()`) the data (creates if missing, overwrites if existing) to the tables `daily_counts` and `daily_report`.\nHere is what BigQuery looked like after running this script:\n\n<center>\n\n![](images/etl2.PNG){width=50%}\n\n</center>\n\nAnd the `daily_counts` table:\n\n<center>\n\n![](images/etl3.PNG)\n\n</center>\n\nPutting these data into BigQuery, as opposed to a Cloud Storage bucket for example, is convenient for quick queries when I don't want to load the data into R, like this one to find days with zero bikes counted:\n\n<center>\n\n![](images/etl4.PNG){width=50%}\n\n</center>\n\nI could have simply wrote the data to CSV files and uploaded them via the GCP console, but that would defeat the purpose of next step: automation.\nTo deploy my `etl.R` script, I wrote a fairly simple Dockerfile:\n\n\n::: {.cell}\n\n```{.dockerfile .cell-code}\nFROM rocker/tidyverse:latest\n\nRUN R -e \"install.packages(c('bigrquery', 'httr'), repos = 'http://cran.us.r-project.org')\"\n\nADD oauth-client.json /home/rstudio\nADD etl/etl.R /home/rstudio\n\nCMD Rscript /home/rstudio/etl.R\n```\n:::\n\n\nExplaining how Docker works is a bit out of scope for this post^[For great introductions to Docker for R users, check out [this by Colin Fay](https://colinfay.me/docker-r-reproducibility/) and [this by Andrew Heiss](https://www.andrewheiss.com/blog/2017/04/27/super-basic-practical-guide-to-docker-and-rstudio/).] but from top to bottom:\n\n* `FROM rocker/tidyverse:latest`\n    * The `tidyverse` Docker image provided by RStudio, which you can read more about here: [https://hub.docker.com/r/rocker/tidyverse](https://hub.docker.com/r/rocker/tidyverse).\n    * This image is a bit overkill for this simple script. If I were worried about the size and portability of my image, I would instead use the base R image [https://hub.docker.com/_/r-base](https://hub.docker.com/_/r-base) and install only the packages I need from `tidyverse`.\n* `RUN R -e \"install.packages(c('bigrquery', 'httr'), repos = 'http://cran.us.r-project.org')\"`\n    * Installs the other packages I need besides those that come with `tidyverse`.\n    * Particularly, `httr` for interacting with APIs, and `bigrquery` for BigQuery.\n* `ADD oauth-client.json /home/rstudio` and `ADD etl/etl.R /home/rstudio`\n    * Add my GCP credentials the ETL script to the Docker container.\n* `CMD Rscript /home/rstudio/etl.R`\n    * Run the script.\n    \nI then built the image, tagged it, and pushed it to the Container Registry with these commands:\n\n* `docker build -t hfx-bike-ridership-etl .`\n* `docker tag hfx-bike-ridership-etl gcr.io/hfx-bike-ridership/hfx-bike-ridership-etl`\n* `docker push gcr.io/hfx-bike-ridership/hfx-bike-ridership-etl:latest`\n\nNow that it exists on GCP, I want to schedule this container to run every week through Cloud Build and Cloud Scheduler.\nI used the `googleCloudRunner` package and followed [these instructions](https://code.markedmondson.me/googleCloudRunner/articles/cloudscheduler.html):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(googleCloudRunner)\n\ncr_setup() # Define project ID and authenticate with credentials\n\nbuild <- cr_build_make(\"etl/hfx-bike-ridership-etl.yaml\")\n\ncr_schedule(\n  # Schedule for every Sunday at 12am\n  schedule = \"0 0 * * SUN\",\n  name = \"etl\",\n  httpTarget = cr_schedule_http(build),\n  region = \"northamerica-northeast1\"\n)\n```\n:::\n\n\nHere is how the job showed up in Cloud Scheduler:\n\n:::{.column-page}\n\n![](images/etl5.PNG)\n\n:::\n\nAnd that's the ETL taken care of.\nI left it for a day, and checked the data on Sunday morning to confirm that the data had been updated as expected.\n\n## Model tuning and training\n\nWith the data in place, I then created a Cloud Storage bucket to store models, and wrote the\n[`tune.R` script](https://github.com/taylordunn/hfx-bike-ridership/blob/main/model/tune/tune.R).\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"tune.R\"}\n# Setup -------------------------------------------------------------------\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(bigrquery)\nlibrary(googleCloudStorageR)\nlibrary(tictoc)\nsource(\"model/preprocess.R\")\n\nn_cores <- parallel::detectCores(logical = FALSE)\nlibrary(doParallel)\ncl <- makePSOCKcluster(n_cores - 1)\nregisterDoParallel(cl)\n# This extra step makes sure the parallel workers have access to the\n#  `tidyr::replace_na()` function during pre-processing\nparallel::clusterExport(cl, c(\"replace_na\"))\n\n# Read data ---------------------------------------------------\n\nbq_auth(path = \"oauth-client.json\")\n\n# Define the project, dataset and a new table for this project\nproject <- \"hfx-bike-ridership\"\n\ndaily_counts_table <- bq_table(project, \"bike_counts\", \"daily_counts\")\nbike_data <- bq_table_download(daily_counts_table)\nbike_data_updated <- bq_table_meta(daily_counts_table)$lastModifiedTime %>%\n  as.numeric() %>%\n  # `lastModifiedTime` is in milliseconds from 1970-01-01\n  {as.POSIXct(. / 1000, origin = \"1970-01-01\")}\n\nweather_table <- bq_table(project, \"weather\", \"daily_report\")\nweather_data <- bq_table_download(weather_table)\nweather_data_updated <- bq_table_meta(weather_table)$lastModifiedTime %>%\n  as.numeric() %>%\n  {as.POSIXct(. / 1000, origin = \"1970-01-01\")}\n\n# Pre-process -------------------------------------------------------------\n\nbike_data <- preprocess(bike_data, weather_data)\n\n# Splitting and resampling ------------------------------------------------\n\n# For the initial time split, data is ordered by date so that the training\n#  data consists of the earliest dates across all sites\nbike_data <- bike_data %>% arrange(count_date, site_name)\nbike_split <- initial_time_split(bike_data, prop = 0.7)\n\nbike_train <- training(bike_split)\nbike_test <- testing(bike_split)\n\n# ... but once I'm done splitting the data, I want to order by site followed by\n#  date for two reasons:\n#  (1) `step_impute_roll()` looks for rows in a window (ordered)\n#  (2) the `mase` metric compares predictions to the naive prediction, which\n#      uses the previous value\nbike_train <- bike_train %>% arrange(count_date, site_name)\nbike_test <- bike_test %>% arrange(count_date, site_name)\n\nbike_resamples <-\n  sliding_period(bike_train, index = count_date,\n                 period = \"month\", lookback = 13, assess_stop = 1)\n\n# For model versioning, record the splitting and resampling strategy\nsplits_resamples <- tibble(\n  n_data = nrow(bike_data), n_train = nrow(bike_train), n_test = nrow(bike_test),\n  min_date_train = min(bike_train$count_date),\n  max_date_train = max(bike_train$count_date),\n  min_date_test = min(bike_test$count_date),\n  max_date_test = max(bike_test$count_date),\n  prop = 0.7, resamples = \"sliding_period\",\n  resample_params = \"lookback = 13, assess_stop = 1\"\n)\n\n# Features ------------------------------------------------------------------\n\n# Get Canadian holidays\ncanada_holidays <-\n  timeDate::listHolidays(\n    pattern = \"^CA|^Christmas|^NewYears|Easter[Sun|Mon]|^GoodFriday|^CaRem\"\n  )\n\nbike_recipe <-\n  recipe(n_bikes ~ count_date + site_name + n_bikes_lag_14 +\n           mean_temperature + total_precipitation + speed_max_gust +\n           snow_on_ground,\n         data = bike_train) %>%\n  update_role(count_date, new_role = \"date_variable\") %>%\n  step_date(count_date, features = c(\"dow\", \"doy\", \"year\"),\n            label = TRUE, ordinal = FALSE) %>%\n  step_holiday(count_date, holidays = canada_holidays) %>%\n  step_novel(all_nominal_predictors()) %>%\n  step_dummy(all_nominal_predictors()) %>%\n  step_impute_mean(speed_max_gust) %>%\n  step_mutate_at(c(total_precipitation, snow_on_ground),\n                 fn = ~ replace_na(., 0)) %>%\n  # Use a rolling window to impute temperature\n  step_impute_roll(mean_temperature, statistic = mean, window = 31) %>%\n  step_zv(all_predictors())\n\n\n# Model spec and workflow -----------------------------------------------------\n\nxgb_spec <- boost_tree(\n  mtry = tune(), trees = tune(), min_n = tune(),\n  tree_depth = tune(), learn_rate = tune()\n) %>%\n  set_engine(\"xgboost\") %>%\n  set_mode(\"regression\")\n\nbike_xgb_workflow <- workflow() %>%\n  add_recipe(bike_recipe) %>%\n  add_model(xgb_spec)\n\nbike_train_baked <- prep(bike_recipe) %>% bake(bike_train)\n\nxgb_grid <- grid_latin_hypercube(\n  finalize(mtry(), select(bike_train_baked, -n_bikes)),\n  trees(), min_n(), tree_depth(), learn_rate(),\n  size = 100\n)\n\n# Tune --------------------------------------------------------------------\n\nbike_metrics <- metric_set(rmse, mae, rsq, mase)\n\nset.seed(944)\ntic()\nxgb_tune <- tune_grid(\n  bike_xgb_workflow, resamples = bike_resamples,\n  grid = xgb_grid, metrics = bike_metrics\n)\ntoc()\n\n# Choose the hyperparameters by MASE\nxgb_params <- select_best(xgb_tune, metric = \"mase\")\n# Also get all the metrics on the training for the chosen parameters\ntrain_metrics <- xgb_params %>%\n  left_join(\n    collect_metrics(xgb_tune) %>%\n      select(.metric, mean, n, std_err, .config),\n    by = \".config\"\n  )\n\n# Finalize and fit to the full training set\nbike_xgb_workflow_final <- finalize_workflow(bike_xgb_workflow, xgb_params)\nbike_xgb_fit <- bike_xgb_workflow_final %>% fit(bike_train)\n\n# Predict on the test set and get metrics\ntest_metrics <- bike_xgb_fit %>%\n  augment(bike_test) %>%\n  bike_metrics(truth = n_bikes, estimate = .pred)\n\n# Compile the model and  info into a list\nmodel_tuned <- list(\n  timestamp = Sys.time(),\n  bike_data_updated = bike_data_updated,\n  weather_data_updated = weather_data_updated,\n  splits_resamples = splits_resamples,\n  xgb_params = xgb_params,\n  train_metrics = train_metrics,\n  test_metrics = test_metrics,\n  bike_xgb_fit = bike_xgb_fit\n)\n\n# Save model and model info -----------------------------------------------\n\n# Model object\nwrite_rds(model_tuned, \"model/tune/xgb-model-tuned.rds\")\ngcs_upload_set_limit(20000000L) # 20 Mb\nmetadata <- gcs_upload(\"model/tune/xgb-model-tuned.rds\",\n                       name = \"tune/xgb-model-tuned.rds\",\n                       bucket = \"hfx-bike-ridership-model\")\ntimestamp <- as.POSIXct(metadata$updated,\n                        tryFormats = \"%Y-%m-%dT%H:%M:%OS\", tz = \"GMT\")\n\n# XGB hyperparameters\nxgb_params <- xgb_params %>%\n  mutate(timestamp = model_tuned$timestamp) %>%\n  select(-.config)\nwrite_csv(xgb_params, \"model/tune/xgb-params.csv\",\n          append = TRUE, col_names = FALSE)\nparams_table <- bq_table(project, \"model_info\", \"params\")\nbq_table_upload(params_table,\n                value = xgb_params, fields = xgb_params,\n                create_disposition = \"CREATE_IF_NEEDED\",\n                write_disposition = \"WRITE_APPEND\")\n\n# Model metrics\nxgb_metrics <- bind_rows(\n  train = train_metrics %>%\n    select(metric = .metric, value = mean, n, std_err),\n  test = test_metrics %>%\n    select(metric = .metric, value = .estimate),\n  .id = \"data_set\"\n) %>%\n  mutate(timestamp = model_tuned$timestamp)\nwrite_csv(xgb_metrics, \"model/tune/xgb-metrics.csv\",\n          append = TRUE, col_names = FALSE)\nmetrics_table <- bq_table(project, \"model_info\", \"metrics\")\nbq_table_upload(metrics_table,\n                value = xgb_metrics, fields = xgb_metrics,\n                create_disposition = \"CREATE_IF_NEEDED\",\n                write_disposition = \"WRITE_APPEND\")\n\n# Splitting and resampling strategy\nsplits_resamples <- splits_resamples %>%\n  mutate(timestamp = model_tuned$timestamp)\nwrite_csv(splits_resamples, \"model/tune/splits-resamples.csv\",\n          append = TRUE, col_names = FALSE)\nsplits_resamples_table <- bq_table(project, \"model_info\", \"splits_resamples\")\nbq_table_upload(splits_resamples_table,\n                value = splits_resamples, fields = splits_resamples,\n                create_disposition = \"CREATE_IF_NEEDED\",\n                write_disposition = \"WRITE_APPEND\")\n```\n:::\n\n\nThis actual model code and choices are [mostly unchanged from my last post](../2022-04-29-predicting-bike-ridership-developing-a-model), but in brief it:\nretrieves the latest data from BigQuery, splits the data into training and testing, creates resamples, engineers features, tunes the XGBoost model, finds the best hyperparameters by MASE, and saves the model (as an R object) to the bucket.\nI also decided to keep track of metrics with a BigQuery table:\n\n<center>\n\n![](images/model-metrics.PNG){width=70%}\n\n</center>\n\nI decided to keep this part of the pipeline manual.\nTuning the XGBoost model takes a while on my machine, even with parallel processing, and I've heard enough [horror stories of surprise charges from cloud services](https://reddit.com/r/datascience/comments/tqe3y6/anyone_needs_ec2_instance/) that I don't feel like risking it.\nI will periodically check in on my model predictions, and only plan on re-tuning if performance degrades appreciably.\n\nWhat I will automate, however, is model training.\nEvery time the data is updated (i.e. Sundays at midnight), I want to train the tuned model on the full data set.\nThe idea is pretty simple: get the data from BigQuery, the tuned model from the bucket, fit to the data and save that fit to the same bucket.\nThe tricky bit is that I want this process to trigger only when the data is updated.\nIt turns out that [BigQuery currently doesn't have native functionality to trigger Cloud Run](https://stackoverflow.com/questions/54792976/trigger-cloud-function-when-new-data-in-bigquery), so I had to use a workaround.\n\nFirst, I wrote the [`fit.R` function](https://github.com/taylordunn/hfx-bike-ridership/blob/main/model/fit/fit.R) to work as a `plumber` API ([these instructions were helpful](https://code.markedmondson.me/googleCloudRunner/articles/usecase-r-event-driven-pubsub.html)):\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"fit.R\"}\nlibrary(dplyr)\nlibrary(readr)\nlibrary(tidymodels)\nlibrary(bigrquery)\nlibrary(googleCloudStorageR)\nlibrary(googleCloudRunner)\nlibrary(plumber)\nsource(\"preprocess.R\")\n\nbq_auth(path = \"oauth-client.json\")\ngcs_auth(\"oauth-client.json\")\ngcs_upload_set_limit(20000000L) # 20 Mb\n\n# This function will retrieve the latest data from BigQuery, the trained\n#  model from GCS, and fit an XGBoost model, which is saved to GCS\npub <- function(message) {\n  # Define the project, dataset and a new table for this project\n  project <- \"hfx-bike-ridership\"\n\n  daily_counts_table <- bq_table(project, \"bike_counts\", \"daily_counts\")\n  bike_data <- bq_table_download(daily_counts_table)\n  bike_data_updated <- bq_table_meta(daily_counts_table)$lastModifiedTime %>%\n    as.numeric() %>%\n    {as.POSIXct(. / 1000, origin = \"1970-01-01\")}\n\n\n  weather_table <- bq_table(project, \"weather\", \"daily_report\")\n  weather_data <- bq_table_download(weather_table)\n  weather_data_updated <- bq_table_meta(weather_table)$lastModifiedTime %>%\n    as.numeric() %>%\n    {as.POSIXct(. / 1000, origin = \"1970-01-01\")}\n\n  bike_data <- preprocess(bike_data, weather_data)\n  xgb_tuned <- gcs_get_object(\"tune/xgb-model-tuned.rds\",\n                              bucket = \"hfx-bike-ridership-model\",\n                              parseFunction = gcs_parse_rds)\n\n  message(\"Writing updating xgb-fit\")\n  xgb_fit <- list(\n    tune_timestamp = xgb_tuned$timestamp,\n    timestamp = Sys.time(),\n    bike_data_updated = bike_data_updated,\n    weather_data_updated = weather_data_updated,\n    bike_xgb_fit = fit(xgb_tuned$bike_xgb_fit, bike_data)\n  )\n\n  f <- function(input, output) write_rds(input, output)\n  metadata <- gcs_upload(xgb_fit, name = \"xgb-fit.rds\",\n                         bucket = \"hfx-bike-ridership-model\",\n                         object_function = f)\n\n  return(TRUE)\n}\n\n#' Receive pub/sub message\n#' @post /pubsub\n#' @param message a pub/sub message\nfunction(message = NULL) {\n  message(\"Received message \", message)\n  googleCloudRunner::cr_plumber_pubsub(message, pub)\n}\n```\n:::\n\n\nI wrote a [Docker file to containerize the API](https://github.com/taylordunn/hfx-bike-ridership/blob/main/model/fit/Dockerfile), built the image, and pushed it to the Container Registry.\nI then went to Cloud Run, created a new service called `hfx-bike-ridership-fit` using the just-uploaded Docker image:\n\n<center>\n\n![](images/cloud-run1.PNG){width=70%}\n\n</center>\n\nOnce up and running, this gave me a URL from which to query the API:\n\n<center>\n\n![](images/cloud-run2.PNG){width=90%}\n\n</center>\n\nNext, I had to set up an internal messaging system.\nThe steps were:\n\n1. I added a `message(\"Finished ETL pipeline\")` at the end of the `etl.R` script to indicate that the data was updated.\n2. This message shows up in Cloud Logging, so I added a \"sink\" (which is how Logging routes messages) to look for this specific log.\n\n<center>\n\n![](images/sink.PNG){width=80%}\n\n</center>\n\n3. The destination of this sink is a Pub/Sub topic called `data-updated`.\n4. I added a subscription to this topic which pushes a POST request to the API.\n\n<center>\n\n![](images/pubsub.PNG){width=60%}\n\n</center>\n5. The POST request triggers the model fitting code, and the new model is uploaded to the Storage bucket.\n\nThis seems like a complex workaround for a fairly simple task -- I might be missing an easier method.\nAlso, it may have made more sense to just have the model re-train on a weekly schedule (just after the ETL pipeline), but I wanted more flexibility for ad hoc updates.\nRegardless, both the ETL and model training are now fully automated.\n\n## Deployment\n\n### REST API\n\nTo serve predictions, I wrote another `plumber` API in the [`api.R` script](https://github.com/taylordunn/hfx-bike-ridership/blob/main/model/api/api.R):\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"api.R\"}\n#* @apiTitle Predict bike ridership in Halifax, NS\n#* @apiDescription This API serves predictions for the daily number of bicyclists passing particular sites around Halifax, Nova Scotia. For more information, check out the [source code](https://github.com/taylordunn/hfx-bike-ridership), my [post about the data](https://tdunn.ca/posts/2022-04-27-predicting-bike-ridership-getting-the-data/), and [my post about developing the model](https://tdunn.ca/posts/2022-04-29-predicting-bike-ridership-developing-a-model/).\n#* @apiContact list(name = \"Taylor Dunn\", url = \"http://www.tdunn.ca\", email = \"t.dunn19@gmail.com\")\n#* @apiVersion 1.0\n\nlibrary(plumber)\nlibrary(dplyr)\nlibrary(tidymodels)\nlibrary(bigrquery)\nlibrary(googleCloudStorageR)\n\nbq_auth(path = \"oauth-client.json\",\n        email = \"hfx-bike-ridership@hfx-bike-ridership.iam.gserviceaccount.com\")\ngcs_auth(\"oauth-client.json\")\n\nproject <- \"hfx-bike-ridership\"\n\nmessage(\"Reading data\")\ndaily_counts_table <- bq_table(project, \"bike_counts\", \"daily_counts\")\nbike_data <- bq_table_download(daily_counts_table)\n\nmessage(\"Loading model\")\nxgb_fit <- gcs_get_object(\"xgb-fit.rds\", bucket = \"hfx-bike-ridership-model\",\n                          parseFunction = gcs_parse_rds)\n\nsite_names <- c(\"Dartmouth Harbourfront Greenway\", \"Hollis St\",\n                \"South Park St\", \"Vernon St\", \"Windsor St\")\n\n#* @param count_date:str The date in YYYY-MM-DD format.\n#* @param site_name:[str] The location of the bike counter. One of \"Dartmouth Harbourfront Greenway\", \"Hollis St\", \"South Park St\", \"Vernon St\", \"Windsor St\".\n#* @param n_bikes_lag_14:[int] The number of bikes measured at the given `site_name` 14 days ago. If not provided, will attempt to impute with the actual value 14 days before `count_date`.\n#* @param mean_temperature:numeric The daily mean temperature. If not provided, will impute with the rolling mean.\n#* @param total_precipitation:numeric The daily amount of precipitation in mm. If not provided, will impute with zero.\n#* @param snow_on_ground:numeric The daily amount of snow on the ground in cm. If not provided, will impute with zero.\n#* @param speed_max_gust:numeric The daily maximum wind speed in km/h. If not provided, will impute with the mean in the training set.\n#* @get /n_bikes\nfunction(count_date, site_name = NA_character_, n_bikes_lag_14 = NA_integer_,\n         mean_temperature = NA_real_, total_precipitation = NA_real_,\n         snow_on_ground = NA_real_, speed_max_gust = NA_real_) {\n\n  # If not provided, use all `site_name`s\n  if (any(is.na(site_name))) {\n    site_name <- site_names\n  } else {\n    site_name <- match.arg(\n      site_name, choices = site_names, several.ok = TRUE\n    )\n  }\n\n  count_date <- as.Date(count_date)\n\n  # Get the 14-day lagged bike counts for each site\n  if (!is.na(n_bikes_lag_14) & length(site_name) != length(n_bikes_lag_14)) {\n    return(list(\n      status = 400,\n      message = \"Must provide a value of `n_bikes_lag_14` for every given `site_name`.\"\n    ))\n  } else {\n    d <- tibble(site_name = .env$site_name, count_date = .env$count_date,\n                count_date_lag_14 = count_date - 14,\n                n_bikes_lag_14 = .env$n_bikes_lag_14)\n\n    if (sum(is.na(d$n_bikes_lag_14)) > 0) {\n      message(\"Imputing `n_bikes_lag_14`\")\n      d <- d %>%\n        left_join(\n          bike_data %>%\n            select(site_name, count_date_lag_14 = count_date,\n                   n_bikes_lag_14_impute = n_bikes),\n          by = c(\"site_name\", \"count_date_lag_14\")\n        ) %>%\n        mutate(\n          n_bikes_lag_14 = ifelse(is.na(n_bikes_lag_14),\n                                  n_bikes_lag_14_impute, n_bikes_lag_14)\n        ) %>%\n        select(-n_bikes_lag_14_impute)\n\n      if (sum(is.na(d$n_bikes_lag_14)) > 0) {\n        return(list(\n          status = 400,\n          message = paste0(\n            \"Could not find `n_bikes_lag_14` values on date \", count_date,\n            \" for these sites \",\n            filter(d, is.na(n_bikes_lag_14)) %>% pull(site_name) %>% paste(collapse = \", \"),\n            \". Please provide your own `n_bikes_lag_14`, or choose a different `count_date`.\"\n          )\n        ))\n      }\n    }\n  }\n\n  # Add weather variables\n  d <- d %>%\n    mutate(\n      n_bikes_lag_14 = as.numeric(n_bikes_lag_14),\n      mean_temperature = as.numeric(mean_temperature),\n      total_precipitation = as.numeric(total_precipitation),\n      snow_on_ground = as.numeric(snow_on_ground),\n      speed_max_gust = as.numeric(speed_max_gust)\n    )\n\n  augment(xgb_fit$bike_xgb_fit, d)\n}\n\n#* @get /model_info\n#* @response 200 Returns model information: timestamps of when the model was last trained (`timestamp`), the model was last tuned (`tune_timestamp`), the bicycle data was last updated (`bike_data_updated`), the weather data was last updated (`weather_data_updated`).\nfunction() {\n  list(\n    timestamp = xgb_fit$timestamp,\n    tune_timestamp = xgb_fit$tune_timestamp,\n    bike_data_updated = xgb_fit$bike_data_updated,\n    weather_data_updated = xgb_fit$weather_data_updated\n  )\n}\n```\n:::\n\n\nThis reads in the model from the Cloud Storage bucket and the latest bike data from BigQuery.\nAs inputs, it requires only a single date (`count_date`), for which it will return predictions for all 5 sites.\nOne or more specific sites can also be provided (`site_name`).\nIf the lagged values (`n_bikes_lag_14`) are not provided, then they will be imputed from the bike data (an error will be returned if the lagged value cannot be imputed, i.e. there is no data 14 days before `count_date`).\nThe weather inputs `mean_temperature`, `total_precipitation`, `snow_on_ground`, and `speed_max_gust` are imputed if not provided.\n\nAs with `fit.R`, I put this into a [Docker container](https://github.com/taylordunn/hfx-bike-ridership/blob/main/model/api/Dockerfile), pushed to Container Registry, and created a Cloud Run service `hfx-bike-ridership-api` using that image.\n\n![](images/cloud-run3.PNG)\n\nUnlike the previous Cloud Run service which only accepts internal requests, this one is publicly available.\nFor instance, you can get a prediction for `n_bikes` on Hollis St for May 23rd, 2022 with the following R code:\n\n\n::: {.cell hash='predicting-bike-ridership-deploying-the-model_cache/html/n-bikes-query_1858fb8b9194d3836bea5ec8a24e4d8a'}\n\n```{.r .cell-code}\nbase_url <- \"https://hfx-bike-ridership-api-74govvz7xq-uc.a.run.app/\"\nquery <- \"n_bikes?count_date=2022-05-23&site_name=Hollis St\"\n\npaste0(base_url, query) %>%\n  URLencode() %>%\n  GET() %>%\n  content(as = \"parsed\") %>%\n  purrr::flatten()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$site_name\n[1] \"Hollis St\"\n\n$count_date\n[1] \"2022-05-23\"\n\n$count_date_lag_14\n[1] \"2022-05-09\"\n\n$n_bikes_lag_14\n[1] 86\n\n$.pred\n[1] 31.7664\n```\n:::\n:::\n\n\nA great feature of `plumber` is that provides an HTML interface for documenting and interacting with REST APIs.\nCheck out this API here: [https://hfx-bike-ridership-api-74govvz7xq-uc.a.run.app/__docs__/](https://hfx-bike-ridership-api-74govvz7xq-uc.a.run.app/__docs__/).\n\n<details><summary>Screenshot for posterity</summary>\n\n![](images/api-ui-crop.png)\n\n</details>\n\nI also added a `model_info` option, which can be queried to see timestamps of when the model was last tuned and trained, and when the data were last updated:\n\n\n::: {.cell hash='predicting-bike-ridership-deploying-the-model_cache/html/model-info-query_0dea3c9095e24bc97f31618476a30779'}\n\n```{.r .cell-code}\nquery <- \"model_info\"\npaste0(base_url, query) %>%\n  URLencode() %>%\n  GET() %>%\n  content(as = \"parsed\") %>%\n  purrr::flatten()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$timestamp\n[1] \"2022-08-21 04:02:28\"\n\n$tune_timestamp\n[1] \"2022-05-20 15:23:46\"\n\n$bike_data_updated\n[1] \"2022-08-21 04:02:06\"\n\n$weather_data_updated\n[1] \"2022-08-21 04:02:10\"\n```\n:::\n:::\n\n\n### Shiny dashboard\n\nLastly, I wrote a Shiny dashboard to visualize predictions, [`app.R`](https://github.com/taylordunn/hfx-bike-ridership/blob/main/app/app.R):\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"app.R\"}\nlibrary(shiny)\nlibrary(shinydashboard)\nlibrary(dplyr)\nlibrary(readr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(patchwork)\nlibrary(workflows)\nlibrary(bigrquery)\nlibrary(googleCloudStorageR)\nlibrary(DT)\nlibrary(dunnr)\nsource(\"funcs.R\")\n\n# Plotting\nlibrary(showtext)\nsysfonts::font_add_google(\"Roboto Condensed\")\nshowtext_auto()\ntheme_set(theme_td(base_size = 14))\nset_geom_fonts()\nset_palette()\n\n# Authentication to GCP\nproject <- \"hfx-bike-ridership\"\nbq_auth(path = \"oauth-client.json\")\ngcs_auth(\"oauth-client.json\")\nbike_counts_table <- bq_table(project, \"bike_counts\", \"daily_counts\")\nweather_table <- bq_table(project, \"weather\", \"daily_report\")\n\nserver <- function(input, output, session) {\n  # Import data and model ---------------------------------------------------\n  data <- reactiveValues()\n  min_date <- reactiveVal()\n  max_date <- reactiveVal()\n  model <- reactiveVal()\n\n  observe({\n    # Re-reads data every hour\n    invalidateLater(1000 * 60 * 60)\n\n    message(\"Reading data and model\")\n    bike_data_raw <- bq_table_download(bike_counts_table)\n    weather_data_raw <- bq_table_download(weather_table)\n    model(gcs_get_object(\"xgb-fit.rds\",\n                         bucket = \"hfx-bike-ridership-model\",\n                         parseFunction = gcs_parse_rds))\n\n    bike_data <- bike_data_raw %>%\n      preprocess_bike_data() %>%\n      # Only include the last 14 days\n      filter(count_date >= max(count_date) - 13)\n    min_date(min(bike_data$count_date))\n    max_date(max(bike_data$count_date))\n    bike_data_future <- bike_data %>%\n      transmute(\n        count_date = count_date + 14, site_name, n_bikes_lag_14 = n_bikes\n      )\n\n    weather_data <- weather_data_raw %>%\n      preprocess_weather_data() %>%\n      filter(report_date >= min(bike_data$count_date),\n             report_date <= max(bike_data$count_date))\n    weather_data_future <- weather_data %>%\n      transmute(\n        report_date = report_date + 14,\n        # Impute temperature and wind speed with the mean\n        mean_temperature = round(mean(weather_data$mean_temperature,\n                                      na.rm = TRUE), 1),\n        speed_max_gust = round(mean(weather_data$speed_max_gust,\n                                    na.rm = TRUE)),\n        # Impute precipitation and snow with zero\n        total_precipitation = 0, snow_on_ground = 0\n      )\n\n    data$bike <- bind_rows(bike_data, bike_data_future)\n    data$weather <- bind_rows(weather_data, weather_data_future)\n  })\n\n  bike_weather_data <- reactive({\n    data$bike %>%\n      left_join(data$weather, by = c(\"count_date\" = \"report_date\"))\n  })\n\n  # Model info --------------------------------------------------------------\n  output$model_info_1 <- renderText({\n    HTML(\n      paste(\n        \"This Shiny app visualizes predictions of the daily number of bicyclists passing various bike counter sites around Halifax, Nova Scotia, in a four-week window.\",\n        \"Check out the <a href='https://github.com/taylordunn/hfx-bike-ridership'>source code here</a>, and <a href='https://tdunn.ca/posts/2022-05-19-predicting-bike-ridership-deploying-the-model/'>this write-up</a> for more information.\",\n        paste0(\"<br>Data are updated, and the model is re-trained on a schedule: currently every Sunday at midnight AST, and sometimes manually by me. \",\n               \"The current data go up to \",\n               \"<b>\", max_date(), \"</b>\",\n               \" as indicated by the vertical dashed line in the plots.\"),\n        \"<br>The locations of the sites are overlaid on a map of Halifax below:\",\n        sep = \"<br>\"\n      )\n    )\n  })\n\n  output$model_info_2 <- renderText({\n    HTML(\n      paste(\n        \"<br>\",\n        \"In addition to site, other features of the model are:\",\n        paste0(\"<ul>\",\n               \"<li>date features: day of week, day of year, year, and Canadian holidays</li>\",\n               \"<li>the number of bikes counted 14 days ago</li>\",\n               \"<li>weather features: daily mean temperature, total precipitation, maximum gust speed, and snow on the ground\",\n               \"</ul>\"),\n        \"See more information about the features and how missing data are handled <a href='https://tdunn.ca/posts/2022-04-29-predicting-bike-ridership-developing-a-model/'>in this post</a>.\",\n        \"<br>\"\n      )\n    )\n  })\n\n  # Plotting helpers --------------------------------------------------------\n  scale_x <- reactive({\n    scale_x_date(NULL, limits = c(min_date() - 1, max_date() + 14),\n                 breaks = seq.Date(min_date() - 1, max_date() + 14, \"7 days\"),\n                 date_labels = \"%b %d\")\n  })\n  vline <- reactive({\n    geom_vline(xintercept = max_date(), lty = 2, size = 1)\n  })\n\n  # Bike predictions --------------------------------------------------------\n  output$n_bikes_plot <- renderPlot({\n    workflows:::augment.workflow(model()$bike_xgb_fit,\n                                 bike_weather_data()) %>%\n      ggplot(aes(x = count_date)) +\n      vline() +\n      geom_line(aes(y = .pred), color = \"black\", size = 1) +\n      geom_point(aes(y = n_bikes, fill = site_name),\n                 color = \"black\", shape = 21, size = 4) +\n      facet_wrap(~ site_name, ncol = 1) +\n      expand_limits(y = 0) +\n      labs(y = NULL) +\n      scale_x() +\n      labs(title = \"Number of bikes vs date\",\n           subtitle = \"Coloured points show actual values, black lines are predictions\") +\n      theme(legend.position = \"none\") +\n      dunnr::add_facet_borders()\n  })\n\n  # Weather data ------------------------------------------------------------\n  temperature_plot <- reactive({\n    data$weather %>%\n      filter(!is.na(mean_temperature)) %>%\n      mutate(var = \"Mean daily temperature (celsius)\") %>%\n      ggplot(aes(x = report_date, y = mean_temperature)) +\n      vline() +\n      geom_point(fill = td_colors$nice$strong_red, shape = 21, size = 4) +\n      facet_wrap(~ var) +\n      labs(y = NULL,\n           title = \"Weather vs date\",\n           subtitle = \"Use the table below to edit values for prediction\") +\n      scale_x() +\n      theme(axis.text.x = element_blank()) +\n      dunnr::add_facet_borders()\n  })\n  precipitation_plot <- reactive({\n    data$weather %>%\n      filter(!is.na(total_precipitation)) %>%\n      mutate(var = \"Total daily precipitation (mm)\") %>%\n      ggplot(aes(x = report_date, y = total_precipitation)) +\n      vline() +\n      geom_col(fill = td_colors$nice$spanish_blue, color = \"black\") +\n      facet_wrap(~ var) +\n      expand_limits(y = 5) +\n      scale_y_continuous(NULL, expand = expansion(mult = c(0, 0.05))) +\n      scale_x() +\n      theme(axis.text.x = element_blank()) +\n      dunnr::add_facet_borders()\n  })\n\n  snow_plot <- reactive({\n    data$weather %>%\n      filter(!is.na(snow_on_ground)) %>%\n      mutate(var = \"Snow on ground (cm)\") %>%\n      ggplot(aes(x = report_date, y = snow_on_ground)) +\n      vline() +\n      geom_col(fill = td_colors$nice$charcoal, color = \"black\") +\n      facet_wrap(~ var) +\n      expand_limits(y = 5) +\n      scale_y_continuous(NULL, expand = expansion(mult = c(0, 0.05))) +\n      scale_x() +\n      theme(axis.text.x = element_blank()) +\n      dunnr::add_facet_borders()\n  })\n  wind_plot <- reactive({\n    data$weather %>%\n      filter(!is.na(speed_max_gust)) %>%\n      mutate(var = \"Maximum wind gust (km/h)\") %>%\n      ggplot(aes(x = report_date, y = speed_max_gust)) +\n      vline() +\n      geom_point(fill = td_colors$nice$emerald, shape = 21, size = 4) +\n      facet_wrap(~ var) +\n      labs(y = NULL) +\n      scale_x()\n  })\n\n  output$weather_plot <- renderPlot({\n    temperature_plot() +\n      precipitation_plot() +\n      snow_plot() +\n      wind_plot() +\n      plot_layout(ncol = 1)\n  })\n\n  output$weather_table <- renderDataTable(\n    datatable(\n      data$weather,\n      rownames = FALSE, escape = FALSE,\n      colnames = c(\"Date\", \"Temp.\", \"Precip.\", \"Snow\", \"Wind\"),\n      editable = list(target = \"cell\", numeric = c(2, 3, 4, 5)),\n      options = list(pageLength = 7, dom = \"tp\"),\n      caption = \"Double click a cell to edit values. Plots and predictions will update automatically.\"\n    ) %>%\n      DT::formatStyle(names(data$weather), lineHeight = \"80%\")\n  )\n\n  observeEvent(input$weather_table_cell_edit, {\n    row <- input$weather_table_cell_edit$row\n    col <- input$weather_table_cell_edit$col\n    data$weather[row, col + 1] <- input$weather_table_cell_edit$value\n  })\n}\n\nui <- dashboardPage(\n  skin = \"yellow\",\n  dashboardHeader(title = \"Predicting bike ridership in Halifax, NS\",\n                  titleWidth = 500),\n  dashboardSidebar(disable = TRUE),\n  dashboardBody(\n    tags$head(\n      tags$link(rel = \"stylesheet\", type = \"text/css\", href = \"custom.css\")\n    ),\n    fluidRow(\n    column(\n      width = 3,\n      box(\n        title = HTML(paste0(as.character(icon(\"info\")), \" <b>Info</b>\")),\n        width = 12,\n        style = \"overflow-x: scroll;\",\n        uiOutput(\"model_info_1\"),\n        img(src = \"bike-counter-sites.png\",\n            style = \"width: 300px; display: block; margin-left: auto; margin-right: auto;\"),\n        uiOutput(\"model_info_2\")\n      )\n    ),\n    column(\n      width = 5,\n      box(\n        width = 12,\n        style = \"overflow-x: scroll;\",\n        plotOutput(\"n_bikes_plot\", height = \"800px\")\n      )\n    ),\n    column(\n      width = 4,\n      box(\n        width = 12,\n        style = \"overflow-x: scroll;\",\n        plotOutput(\"weather_plot\", height = \"600px\"),\n        dataTableOutput(\"weather_table\")\n      )\n    )\n  )\n  )\n)\n\nshinyApp(ui, server)\n```\n:::\n\n\nI wrote the [Docker file](https://github.com/taylordunn/hfx-bike-ridership/blob/main/app/Dockerfile), pushed it to Container Registry, and deployed on Cloud Run.\n\nAssuming I haven't shut it down (and that my billing information is not out of date), you can [try the app here](https://hfx-bike-ridership-app-74govvz7xq-uc.a.run.app/) or embedded below:\n\n\n:::{.column-screen-inset-shaded}\n\n<iframe src=\"https://hfx-bike-ridership-app-74govvz7xq-uc.a.run.app/\" data-external=\"1\" width=\"100%\" height=\"1100\"></iframe>\n\n:::\n\nIn terms of design, I went with a three column layout with content organized into `shinydashboard::box()`s.\nThe left-most column has some basic information, including the date of when the data and model were last updated.\nI also included a map showing the locations of the five sites:\n\n<center>\n\n![](images/app1.png){width=80%}\n\n</center>\n\nThe main interest of this dashboard is the forecasted number of bikes, so it takes the centre column:\n\n![](images/app2.png)\n\nThere is a lot of data involved in this proejct, but I decided to keep this app fairly small in scope.\nJust the last 14 days and the next 14 days (relative to the when data/model were updated) are shown here.\n\nThe third column shows the most interesting predictors of the model -- the weather variables:\n\n<center>\n\n![](images/app3.png){width=80%}\n\n</center>\n\nThe 14 days to the left of the dashed line are actual values, and the 14 days to right right are imputed future values.^[It would be cool to impute these values with weather forecasts, but I couldn't find a reliable/free way to get that data.]\nThe table at the bottom lists all of the visualized weather data.\nTo add some interactivity, I decided to make this part editable:\n\n![](images/app-weather1.gif)\n\nEverything is reactive to this table, so the plots will be updated immediately:\n\n![](images/app-weather2.gif)\n\nand so will the predictions:\n\n![](images/app-weather3.gif)\n\nThis allows me to ask questions like: how will the predicted number of bicyclists change if it downpours tomorrow?\n\n## Conclusion\n\nIn this post I used Google Cloud Platform to automate the data ETL pipeline and model training.\nThe model was then deployed in a REST API and Shiny dashboard.\nWhen considering the full MLOps cycle, the biggest missing piece is some sort of monitoring functionality.\nThis could include data validation (e.g. trigger an alert if new data have abnormal or missing values) and model drift detection (e.g. model performance is below some threshold which triggers re-tuning).\nBut as far as personal projects go, I'm content to leave it here and re-visit it every once in a while to see how the data and predictions are holding up.\n\nRegardless of the value of the model, this was a great learning experience.\nI'd not used GCP much before this (we use AWS at my company) but it wasn't too painful a transition between cloud services.\nThe packages by Mark Edmondson ([`googleCloudStorageR`](https://code.markedmondson.me/googleCloudStorageR/), [`googleCloudRunner`](https://code.markedmondson.me/googleCloudRunner/)), and the accompanying documentation, were a great help.\n\nDocumenting my process here was important to me.\nI learn best by doing, and second best by seeing what others do in open source projects like this.\nI hope that this walkthrough and code can help others in getting their own MLOps projects up-and-running.\n\n## Reproducibility {.appendix .unlisted}\n\n<details><summary>Session info</summary>\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n setting  value\n version  R version 4.2.1 (2022-06-23 ucrt)\n os       Windows 10 x64 (build 19044)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  English_Canada.utf8\n ctype    English_Canada.utf8\n tz       America/Curacao\n date     2022-08-21\n pandoc   2.18 @ C:/Program Files/RStudio/bin/quarto/bin/tools/ (via rmarkdown)\n```\n:::\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"package\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"ondiskversion\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"loadedversion\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"path\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"loadedpath\"],\"name\":[5],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"attached\"],\"name\":[6],\"type\":[\"lgl\"],\"align\":[\"right\"]},{\"label\":[\"is_base\"],\"name\":[7],\"type\":[\"lgl\"],\"align\":[\"right\"]},{\"label\":[\"date\"],\"name\":[8],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"source\"],\"name\":[9],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"md5ok\"],\"name\":[10],\"type\":[\"lgl\"],\"align\":[\"right\"]},{\"label\":[\"library\"],\"name\":[11],\"type\":[\"fct\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"assertthat\",\"2\":\"0.2.1\",\"3\":\"0.2.1\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/assertthat\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/assertthat\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2019-03-21\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"assertthat\"},{\"1\":\"backports\",\"2\":\"1.4.1\",\"3\":\"1.4.1\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/backports\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/backports\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2021-12-13\",\"9\":\"CRAN (R 4.2.0)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"backports\"},{\"1\":\"broom\",\"2\":\"1.0.0\",\"3\":\"1.0.0\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/broom\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/broom\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-07-01\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"broom\"},{\"1\":\"cachem\",\"2\":\"1.0.6\",\"3\":\"1.0.6\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/cachem\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/cachem\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2021-08-19\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"cachem\"},{\"1\":\"callr\",\"2\":\"3.7.1\",\"3\":\"3.7.1\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/callr\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/callr\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-07-13\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"callr\"},{\"1\":\"cellranger\",\"2\":\"1.1.0\",\"3\":\"1.1.0\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/cellranger\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/cellranger\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2016-07-27\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"cellranger\"},{\"1\":\"cli\",\"2\":\"3.3.0\",\"3\":\"3.3.0\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/cli\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/cli\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-04-25\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"cli\"},{\"1\":\"colorspace\",\"2\":\"2.0.3\",\"3\":\"2.0-3\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/colorspace\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/colorspace\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-02-21\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"colorspace\"},{\"1\":\"crayon\",\"2\":\"1.5.1\",\"3\":\"1.5.1\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/crayon\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/crayon\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-03-26\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"crayon\"},{\"1\":\"DBI\",\"2\":\"1.1.3\",\"3\":\"1.1.3\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/DBI\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/DBI\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-06-18\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"DBI\"},{\"1\":\"dbplyr\",\"2\":\"2.2.1\",\"3\":\"2.2.1\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/dbplyr\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/dbplyr\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-06-27\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"dbplyr\"},{\"1\":\"devtools\",\"2\":\"2.4.4\",\"3\":\"2.4.4\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/devtools\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/devtools\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-07-20\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"devtools\"},{\"1\":\"digest\",\"2\":\"0.6.29\",\"3\":\"0.6.29\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/digest\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/digest\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2021-12-01\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"digest\"},{\"1\":\"distill\",\"2\":\"1.4\",\"3\":\"1.4\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/distill\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/distill\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-05-12\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"distill\"},{\"1\":\"downlit\",\"2\":\"0.4.2\",\"3\":\"0.4.2\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/downlit\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/downlit\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-07-05\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"downlit\"},{\"1\":\"dplyr\",\"2\":\"1.0.9\",\"3\":\"1.0.9\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/dplyr\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/dplyr\",\"6\":\"TRUE\",\"7\":\"FALSE\",\"8\":\"2022-04-28\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"dplyr\"},{\"1\":\"dunnr\",\"2\":\"0.2.6\",\"3\":\"0.2.6\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/dunnr\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/dunnr\",\"6\":\"TRUE\",\"7\":\"FALSE\",\"8\":\"2022-08-07\",\"9\":\"Github (taylordunn/dunnr@e2a82136012b9edae43fc5f8e728492125366267)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"dunnr\"},{\"1\":\"ellipsis\",\"2\":\"0.3.2\",\"3\":\"0.3.2\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/ellipsis\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/ellipsis\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2021-04-29\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"ellipsis\"},{\"1\":\"evaluate\",\"2\":\"0.15\",\"3\":\"0.15\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/evaluate\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/evaluate\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-02-18\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"evaluate\"},{\"1\":\"extrafont\",\"2\":\"0.18\",\"3\":\"0.18\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/extrafont\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/extrafont\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-04-12\",\"9\":\"CRAN (R 4.2.0)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"extrafont\"},{\"1\":\"extrafontdb\",\"2\":\"1.0\",\"3\":\"1.0\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/extrafontdb\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/extrafontdb\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2012-06-11\",\"9\":\"CRAN (R 4.2.0)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"extrafontdb\"},{\"1\":\"fansi\",\"2\":\"1.0.3\",\"3\":\"1.0.3\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/fansi\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/fansi\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-03-24\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"fansi\"},{\"1\":\"fastmap\",\"2\":\"1.1.0\",\"3\":\"1.1.0\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/fastmap\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/fastmap\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2021-01-25\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"fastmap\"},{\"1\":\"forcats\",\"2\":\"0.5.1\",\"3\":\"0.5.1\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/forcats\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/forcats\",\"6\":\"TRUE\",\"7\":\"FALSE\",\"8\":\"2021-01-27\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"forcats\"},{\"1\":\"fs\",\"2\":\"1.5.2\",\"3\":\"1.5.2\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/fs\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/fs\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2021-12-08\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"fs\"},{\"1\":\"gargle\",\"2\":\"1.2.0\",\"3\":\"1.2.0\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/gargle\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/gargle\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2021-07-02\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"gargle\"},{\"1\":\"generics\",\"2\":\"0.1.3\",\"3\":\"0.1.3\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/generics\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/generics\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-07-05\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"generics\"},{\"1\":\"ggplot2\",\"2\":\"3.3.6\",\"3\":\"3.3.6\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/ggplot2\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/ggplot2\",\"6\":\"TRUE\",\"7\":\"FALSE\",\"8\":\"2022-05-03\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"ggplot2\"},{\"1\":\"ggrepel\",\"2\":\"0.9.1\",\"3\":\"0.9.1\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/ggrepel\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/ggrepel\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2021-01-15\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"ggrepel\"},{\"1\":\"glue\",\"2\":\"1.6.2\",\"3\":\"1.6.2\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/glue\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/glue\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-02-24\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"glue\"},{\"1\":\"googledrive\",\"2\":\"2.0.0\",\"3\":\"2.0.0\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/googledrive\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/googledrive\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2021-07-08\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"googledrive\"},{\"1\":\"googlesheets4\",\"2\":\"1.0.0\",\"3\":\"1.0.0\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/googlesheets4\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/googlesheets4\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2021-07-21\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"googlesheets4\"},{\"1\":\"gtable\",\"2\":\"0.3.0\",\"3\":\"0.3.0\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/gtable\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/gtable\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2019-03-25\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"gtable\"},{\"1\":\"haven\",\"2\":\"2.5.0\",\"3\":\"2.5.0\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/haven\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/haven\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-04-15\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"haven\"},{\"1\":\"hms\",\"2\":\"1.1.1\",\"3\":\"1.1.1\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/hms\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/hms\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2021-09-26\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"hms\"},{\"1\":\"htmltools\",\"2\":\"0.5.2\",\"3\":\"0.5.2\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/htmltools\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/htmltools\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2021-08-25\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"NA\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"htmltools\"},{\"1\":\"htmlwidgets\",\"2\":\"1.5.4\",\"3\":\"1.5.4\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/htmlwidgets\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/htmlwidgets\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2021-09-08\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"htmlwidgets\"},{\"1\":\"httpuv\",\"2\":\"1.6.5\",\"3\":\"1.6.5\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/httpuv\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/httpuv\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-01-05\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"httpuv\"},{\"1\":\"httr\",\"2\":\"1.4.3\",\"3\":\"1.4.3\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/httr\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/httr\",\"6\":\"TRUE\",\"7\":\"FALSE\",\"8\":\"2022-05-04\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"httr\"},{\"1\":\"jsonlite\",\"2\":\"1.8.0\",\"3\":\"1.8.0\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/jsonlite\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/jsonlite\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-02-22\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"jsonlite\"},{\"1\":\"knitr\",\"2\":\"1.39\",\"3\":\"1.39\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/knitr\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/knitr\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-04-26\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"knitr\"},{\"1\":\"later\",\"2\":\"1.3.0\",\"3\":\"1.3.0\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/later\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/later\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2021-08-18\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"later\"},{\"1\":\"lifecycle\",\"2\":\"1.0.1\",\"3\":\"1.0.1\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/lifecycle\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/lifecycle\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2021-09-24\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"lifecycle\"},{\"1\":\"lubridate\",\"2\":\"1.8.0\",\"3\":\"1.8.0\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/lubridate\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/lubridate\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2021-10-07\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"lubridate\"},{\"1\":\"magrittr\",\"2\":\"2.0.3\",\"3\":\"2.0.3\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/magrittr\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/magrittr\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-03-30\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"magrittr\"},{\"1\":\"memoise\",\"2\":\"2.0.1\",\"3\":\"2.0.1\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/memoise\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/memoise\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2021-11-26\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"memoise\"},{\"1\":\"mime\",\"2\":\"0.12\",\"3\":\"0.12\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/mime\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/mime\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2021-09-28\",\"9\":\"CRAN (R 4.2.0)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"mime\"},{\"1\":\"miniUI\",\"2\":\"0.1.1.1\",\"3\":\"0.1.1.1\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/miniUI\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/miniUI\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2018-05-18\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"miniUI\"},{\"1\":\"modelr\",\"2\":\"0.1.8\",\"3\":\"0.1.8\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/modelr\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/modelr\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2020-05-19\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"modelr\"},{\"1\":\"munsell\",\"2\":\"0.5.0\",\"3\":\"0.5.0\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/munsell\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/munsell\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2018-06-12\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"munsell\"},{\"1\":\"pillar\",\"2\":\"1.8.0\",\"3\":\"1.8.0\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/pillar\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/pillar\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-07-18\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"pillar\"},{\"1\":\"pkgbuild\",\"2\":\"1.3.1\",\"3\":\"1.3.1\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/pkgbuild\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/pkgbuild\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2021-12-20\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"pkgbuild\"},{\"1\":\"pkgconfig\",\"2\":\"2.0.3\",\"3\":\"2.0.3\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/pkgconfig\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/pkgconfig\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2019-09-22\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"pkgconfig\"},{\"1\":\"pkgload\",\"2\":\"1.3.0\",\"3\":\"1.3.0\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/pkgload\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/pkgload\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-06-27\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"pkgload\"},{\"1\":\"prettyunits\",\"2\":\"1.1.1\",\"3\":\"1.1.1\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/prettyunits\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/prettyunits\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2020-01-24\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"prettyunits\"},{\"1\":\"processx\",\"2\":\"3.7.0\",\"3\":\"3.7.0\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/processx\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/processx\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-07-07\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"processx\"},{\"1\":\"profvis\",\"2\":\"0.3.7\",\"3\":\"0.3.7\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/profvis\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/profvis\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2020-11-02\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"profvis\"},{\"1\":\"promises\",\"2\":\"1.2.0.1\",\"3\":\"1.2.0.1\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/promises\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/promises\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2021-02-11\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"promises\"},{\"1\":\"ps\",\"2\":\"1.7.1\",\"3\":\"1.7.1\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/ps\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/ps\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-06-18\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"ps\"},{\"1\":\"purrr\",\"2\":\"0.3.4\",\"3\":\"0.3.4\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/purrr\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/purrr\",\"6\":\"TRUE\",\"7\":\"FALSE\",\"8\":\"2020-04-17\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"purrr\"},{\"1\":\"R6\",\"2\":\"2.5.1\",\"3\":\"2.5.1\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/R6\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/R6\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2021-08-19\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"R6\"},{\"1\":\"Rcpp\",\"2\":\"1.0.9\",\"3\":\"1.0.9\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/Rcpp\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/Rcpp\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-07-08\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"Rcpp\"},{\"1\":\"readr\",\"2\":\"2.1.2\",\"3\":\"2.1.2\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/readr\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/readr\",\"6\":\"TRUE\",\"7\":\"FALSE\",\"8\":\"2022-01-30\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"readr\"},{\"1\":\"readxl\",\"2\":\"1.4.0\",\"3\":\"1.4.0\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/readxl\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/readxl\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-03-28\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"readxl\"},{\"1\":\"remotes\",\"2\":\"2.4.2\",\"3\":\"2.4.2\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/remotes\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/remotes\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2021-11-30\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"remotes\"},{\"1\":\"renv\",\"2\":\"0.15.5\",\"3\":\"0.15.5\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/renv\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/renv\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-05-26\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"renv\"},{\"1\":\"reprex\",\"2\":\"2.0.1\",\"3\":\"2.0.1\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/reprex\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/reprex\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2021-08-05\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"reprex\"},{\"1\":\"rlang\",\"2\":\"1.0.4\",\"3\":\"1.0.4\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/rlang\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/rlang\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-07-12\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"rlang\"},{\"1\":\"rmarkdown\",\"2\":\"2.14\",\"3\":\"2.14\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/rmarkdown\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/rmarkdown\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-04-25\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"rmarkdown\"},{\"1\":\"rstudioapi\",\"2\":\"0.13\",\"3\":\"0.13\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/rstudioapi\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/rstudioapi\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2020-11-12\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"rstudioapi\"},{\"1\":\"Rttf2pt1\",\"2\":\"1.3.8\",\"3\":\"1.3.8\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/Rttf2pt1\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/Rttf2pt1\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2020-01-10\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"Rttf2pt1\"},{\"1\":\"rvest\",\"2\":\"1.0.2\",\"3\":\"1.0.2\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/rvest\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/rvest\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2021-10-16\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"rvest\"},{\"1\":\"scales\",\"2\":\"1.2.0\",\"3\":\"1.2.0\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/scales\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/scales\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-04-13\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"scales\"},{\"1\":\"sessioninfo\",\"2\":\"1.2.2\",\"3\":\"1.2.2\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/sessioninfo\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/sessioninfo\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2021-12-06\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"sessioninfo\"},{\"1\":\"shiny\",\"2\":\"1.7.2\",\"3\":\"1.7.2\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/shiny\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/shiny\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-07-19\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"shiny\"},{\"1\":\"stringi\",\"2\":\"1.7.8\",\"3\":\"1.7.8\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/stringi\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/stringi\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-07-11\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"stringi\"},{\"1\":\"stringr\",\"2\":\"1.4.0\",\"3\":\"1.4.0\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/stringr\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/stringr\",\"6\":\"TRUE\",\"7\":\"FALSE\",\"8\":\"2019-02-10\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"stringr\"},{\"1\":\"tibble\",\"2\":\"3.1.8\",\"3\":\"3.1.8\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/tibble\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/tibble\",\"6\":\"TRUE\",\"7\":\"FALSE\",\"8\":\"2022-07-22\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"tibble\"},{\"1\":\"tidyr\",\"2\":\"1.2.0\",\"3\":\"1.2.0\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/tidyr\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/tidyr\",\"6\":\"TRUE\",\"7\":\"FALSE\",\"8\":\"2022-02-01\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"tidyr\"},{\"1\":\"tidyselect\",\"2\":\"1.1.2\",\"3\":\"1.1.2\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/tidyselect\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/tidyselect\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-02-21\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"tidyselect\"},{\"1\":\"tidyverse\",\"2\":\"1.3.2\",\"3\":\"1.3.2\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/tidyverse\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/tidyverse\",\"6\":\"TRUE\",\"7\":\"FALSE\",\"8\":\"2022-07-18\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"tidyverse\"},{\"1\":\"tzdb\",\"2\":\"0.3.0\",\"3\":\"0.3.0\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/tzdb\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/tzdb\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-03-28\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"tzdb\"},{\"1\":\"urlchecker\",\"2\":\"1.0.1\",\"3\":\"1.0.1\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/urlchecker\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/urlchecker\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2021-11-30\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"urlchecker\"},{\"1\":\"usethis\",\"2\":\"2.1.6\",\"3\":\"2.1.6\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/usethis\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/usethis\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-05-25\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"usethis\"},{\"1\":\"utf8\",\"2\":\"1.2.2\",\"3\":\"1.2.2\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/utf8\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/utf8\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2021-07-24\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"utf8\"},{\"1\":\"vctrs\",\"2\":\"0.4.1\",\"3\":\"0.4.1\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/vctrs\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/vctrs\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-04-13\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"vctrs\"},{\"1\":\"withr\",\"2\":\"2.5.0\",\"3\":\"2.5.0\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/withr\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/withr\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-03-03\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"withr\"},{\"1\":\"xfun\",\"2\":\"0.31\",\"3\":\"0.31\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/xfun\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/xfun\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-05-10\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"xfun\"},{\"1\":\"xml2\",\"2\":\"1.3.3\",\"3\":\"1.3.3\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/xml2\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/xml2\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2021-11-30\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"xml2\"},{\"1\":\"xtable\",\"2\":\"1.8.4\",\"3\":\"1.8-4\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/xtable\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/xtable\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2019-04-21\",\"9\":\"CRAN (R 4.2.1)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"xtable\"},{\"1\":\"yaml\",\"2\":\"2.3.5\",\"3\":\"2.3.5\",\"4\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/yaml\",\"5\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2/yaml\",\"6\":\"FALSE\",\"7\":\"FALSE\",\"8\":\"2022-02-21\",\"9\":\"CRAN (R 4.2.0)\",\"10\":\"TRUE\",\"11\":\"C:/Users/tdunn/AppData/Local/R/win-library/4.2\",\"_rn_\":\"yaml\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n</details>\n\n<details><summary>Git repository</summary>\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nLocal:    main C:/Users/tdunn/Documents/tdunn-quarto\nRemote:   main @ origin (https://github.com/taylordunn/tdunn-quarto.git)\nHead:     [767c281] 2022-08-21: Finished converting `predicting-bike-ridership-deploying-the-model`\n```\n:::\n:::\n\n\n</details>\n\n\n<a href=\"https://github.com/taylordunn/tdunn-quarto/tree/main/posts/2022-05-19-predicting-bike-ridership-deploying-the-model\">Source code</a>, <a href=\"https://github.com/taylordunn/tdunn-quarto/tree/main/posts/2022-05-19-predicting-bike-ridership-deploying-the-model/renv.lock\">R environment</a>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}