---
title: "Canada COVID-19 data in R: exploring the API"
description: |
  An exploration of the Canadian COVID-19 tracker API.
date: 2021-12-28
params:
  date: 2021-12-28
  slug: "canada-covid-19-data-in-r-exploring-the-api"
categories:
  - R
  - COVID-19
  - API
image: preview.png
---

```{r}
#| include: false
renv::use(lockfile = "renv.lock")
```

```{r}
#| code-fold: true
#| code-summary: "R setup"
#| message: false
library(tidyverse)
library(patchwork)
library(httr)
library(gt)

library(dunnr)
extrafont::loadfonts(device = "win", quiet = TRUE)
theme_set(theme_td())
set_geom_fonts()
set_palette()
```

## Introduction

With this post, I will explore the [Canadian COVID-19 tracker API](https://api.covid19tracker.ca/) and, depending on how it goes, turn some of the code into an R package.
For an introduction to working with APIs, see [this vignette](https://cran.r-project.org/web/packages/httr/vignettes/api-packages.html) from the `httr` package.

:::{.callout-note}

In 2022, I ported my website from Distill to Quarto.
This required me to re-run all the code in this post, so the data will go up to 2022-08-21, not 2021-12-28 (the original date of the post).

:::

## Summary

The first data I will retrieve is the data summaries overall, by province, and by health region.
To save typing it every time, the following `base_url` is required for all `GET` requests:

```{r}
base_url <- "https://api.covid19tracker.ca/"
```

### Overall

Modify the URL with `summary` to get the latest data across all provinces:

```{r}
api_url <- paste0(base_url, "summary")
```

Send the `GET` request with `httr`:

```{r}
#| label: resp-summary
#| cache: true
resp <- httr::GET(api_url)
resp
```

This returned a `response` object with the following structure:

```{r}
str(resp, max.level = 1)
```

The `status_code` is the first thing to check:

```{r}
resp$status_code
```

An [HTTP status code](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) of 200 is the standard indicator of a successful request.

Once confirmed successful, the `content` returned from the request is:

```{r}
head(resp$content, 25)
```

Looks like the raw data is represented in hexadecimal.
The `httr::content()` function can parse this data:

```{r}
content_parsed <- httr::content(resp, as = "parsed")
str(content_parsed)
```

<aside>

Per the documentation of `httr`, it is good practice to check the mime type of the response before parsing it.

```{r}
httr::http_type(resp)
```

Here, the data is JSON, which is a type that can be parsed with `httr::content` (via the `jsonlite` package).
We can also parse this data manually as follows (not run):

```{r}
#| eval: false
jsonlite::fromJSON(
  content(resp, "text"),
  simplifyVector = FALSE
)
```

</aside>

The returned data structure is a list of lists.
`data` is a list with all of the summary statistics, while `last_updated` gives a timestamp of when the data was last updated.
Put the data into a data frame:

```{r}
summary_overall <- content_parsed$data %>% data.frame()
glimpse(summary_overall)
```

All of these variables are `character` type, and should be converted into `integer` and `Date` types:

```{r}
summary_overall <- summary_overall %>%
  mutate(
    across(matches("^change|^total"), as.integer),
    across(matches("date"), as.Date)
  )
glimpse(summary_overall)
```

### Province

Instead of aggregating over all provinces, I can use `/summary/split` to get province-level summaries:

```{r}
#| label: resp-summary-province
#| cache: true
resp <- httr::GET(paste0(base_url, "summary/split"))
```

```{r}
content_parsed <- content(resp, as = "parsed")
str(content_parsed, max.level = 2)
```

The `data` list now has 13 lists corresponding to the 13 provinces and territories.
Look at the structure of one of them:

```{r}
str(content_parsed$data[[1]])
```

This is the same structure as the overall summary, but with the extra variable `province` indicating that these numbers are specific to Ontario.

A shortcut to compiling all of these lists into a single data frame with a row per province/territory is to use `dplyr::bind_rows()`:

```{r}
summary_province <- bind_rows(content_parsed$data)
glimpse(summary_province)
```

`bind_rows()` also automatically converts the numeric columns to `integer`, but the `date` column is still `character`:

```{r}
summary_province <- summary_province %>% mutate(date = as.Date(date))
```

### Health region

Data my be split even further by health region with `summary/split/hr`:

```{r}
#| label: resp-summary-hr
#| cache: true
resp <- httr::GET(paste0(base_url, "summary/split/hr"))
```

```{r}
content_parsed <- content(resp, as = "parsed")
str(content_parsed, max.level = 1)
```

This `data` consists of 92 entries with mostly the same variables as previous summaries:

```{r}
str(content_parsed$data[[1]])
```

The differences are the `hr_uid` column in place of `province`, and the lack of `change_vaccines_distributed` and `total_vaccines_distributed`, presumably because these numbers aren't available at this granularity.

```{r}
summary_region <- bind_rows(content_parsed$data) %>%
  mutate(date = as.Date(date))
glimpse(summary_region)
```

`hr_uid` is a unique identifier for each health region.
A lookup table is available through the API with `regions`:

```{r}
#| label: resp-regions
#| cache: true
resp <- httr::GET(paste0(base_url, "regions"))
```

```{r}
content_parsed <- content(resp, as = "parsed")
str(content_parsed, max.level = 1)
```

There are 92 elements, matching the 92 health regions in the summary data, with the following structure:

```{r}
regions <- bind_rows(content_parsed$data)
glimpse(regions)
```

Add the health region to the `summary_region` data:

```{r}
summary_region <- regions %>%
  left_join(summary_region, by = "hr_uid")
glimpse(summary_region)
```

## Reports

### Overall

Reports are much like summaries, but for every day instead of just the most recent.

```{r}
#| label: resp-reports
#| cache: true
resp <- httr::GET(paste0(base_url, "reports"))
```

```{r}
content_parsed <- content(resp, as = "parsed")
str(content_parsed, max.level = 1)
```

An additional top-level variable `province` defines the scope of the report.
The `data` list here consists of 705 elements with the following structure:

```{r}
str(content_parsed$data[[1]])
```

This first element has many zeroes, which makes sense as the `date` (January 25th, 2020) corresponds to the [first confirmed case of COVID in Canada](https://www.ourwindsor.ca/news-story/10124148-how-a-toronto-hospital-handled-canada-s-first-covid-19-case-we-didn-t-know-this-was-a-moment-in-history-/).
The last element of this list should have today's data:

```{r}
str(content_parsed$data[[length(content_parsed$data)]])
```

The data may be bound together in the same way:

```{r}
report_overall <- bind_rows(content_parsed$data) %>%
  mutate(date = as.Date(date))
```

### Province

To split data by province, the two-letter code is provided as `reports/province/{code}`:

```{r}
#| label: resp-reports-ns
#| cache: true
resp <- httr::GET(paste0(base_url, "reports/province/ns"))
```

```{r}
content_parsed <- content(resp, as = "parsed")
report_ns <- bind_rows(content_parsed$data) %>%
  mutate(date = as.Date(date))
glimpse(report_ns)
```

### Health region

Similarly, provide the `hr_uid` in `reports/regions/{hr_uid}` to get health region reports:

```{r}
#| label: resp-reports-hr
#| cache: true
resp <- httr::GET(paste0(base_url, "reports/regions/1204"))
```

```{r}
content_parsed <- content(resp, as = "parsed")
report_ns_central <- bind_rows(content_parsed$data) %>%
  mutate(date = as.Date(date))
glimpse(report_ns_central)
```

I chose Nova Scotia central because it is where I live and, looking at this data, it clearly isn't being updated day-to-day:

```{r}
report_ns_central %>%
  filter(date >= "2021-12-20", date < "2021-12-28") %>%
  glimpse()
```

There has, unfortunately, been hundreds of cases per day here recently.
These numbers are reflected in the province report however:

```{r}
report_ns %>%
  filter(date >= "2021-12-20", date < "2021-12-28") %>%
  glimpse()
```

### Parameters

The reports have a number of optional [parameters available](https://api.covid19tracker.ca/docs/1.0/reports#parameters) to alter the API request.

The `fill_dates` option fills dates with missing entries:

```{r}
#| label: content-fill-dates
#| cache: true
content_parsed <- paste0(base_url, "reports/regions/1204?fill_dates=false") %>%
  httr::GET() %>%
  content(as = "parsed")
```

```{r}
bind_rows(content_parsed$data) %>% glimpse()
```

The `stat` argument allows one to specify a single statistic to return:

```{r}
#| label: content-stat
#| cache: true
content_parsed <- paste0(base_url, "reports/province/ns?stat=cases") %>%
  httr::GET() %>%
  content(as = "parsed")
```

```{r}
bind_rows(content_parsed$data) %>% glimpse()
```

The `date` parameter returns a report from a single date:

```{r}
#| label: content-date
#| cache: true
content_parsed <- paste0(base_url, "reports/province/ab?date=2021-12-25") %>%
  httr::GET() %>%
  content(as = "parsed")
```

```{r}
bind_rows(content_parsed$data) %>% glimpse()
```

Lastly, the `after` and `before` parameters return on/after and on/before specific dates:

```{r}
#| label: content-after-before
#| cache: true
content_parsed <-
  paste0(base_url, "reports/province/qc?after=2021-12-24&before=2021-12-26") %>%
  httr::GET() %>%
  content(as = "parsed")
```

```{r}
bind_rows(content_parsed$data) %>% glimpse()
```

Note how parameters can be combined as above, by separating the arguments with `&`.

## Vaccination data

We have already seen the vaccination data returned by `summary` and `report` requests.
The variables include:

* `vaccinations`: total doses administered
* `vaccinated`: total number of people with two doses
* `boosters_1`: total number of boosters (3rd dose) administered
* `vaccines_administered`: total number of doses delivered to province

At the summary level:

```{r}
summary_province %>%
  filter(province == "NS") %>%
  select(date, matches("vacc|boost")) %>%
  glimpse()
```

At the report level:

```{r}
report_ns %>%
  select(date, matches("vacc|boost")) %>%
  tail() %>%
  glimpse()
```

### Subregions

Vaccination date is also available at the subregion level for certain provinces and territories.
The [API documentation](https://api.covid19tracker.ca/docs/1.0/vaccinations) doesn't actually specify which provinces and territories, but I can find out by requesting the data as follows:

```{r}
#| label: resp-subregion-summary
#| cache: true
resp <- httr::GET(paste0(base_url, "reports/sub-regions/summary"))
```

```{r}
content_parsed <- content(resp, as = "parsed")
subregion_vacc_summary <- bind_rows(content_parsed$data) %>%
  mutate(date = as.Date(date))

glimpse(subregion_vacc_summary)
```

The `code` labels can be retrieved via `sub-regions`:

```{r}
#| label: resp-subregion
#| cache: true
resp <- httr::GET(paste0(base_url, "sub-regions"))
```

```{r}
content_parsed <- content(resp, as = "parsed")
subregions <- bind_rows(content_parsed$data)

glimpse(subregions)
```

`r nrow(subregions)` subregions, which matches the count from the summary, with the following distribution by `province`:

```{r}
subregions %>% count(province) %>% gt()
```

## Vaccine age groups

### Overall

Vaccine data by age groups is reported week-by-week, and accessed with `vaccines/age-groups`:

```{r}
#| label: resp-vaccines-age-groups
#| cache: true
resp <- httr::GET(paste0(base_url, "vaccines/age-groups"))
```

```{r}
content_parsed <- content(resp, as = "parsed")
vaccine_age_groups <- bind_rows(content_parsed$data) %>%
  mutate(date = as.Date(date)) %>%
  filter(date <= "2021-12-28")

glimpse(vaccine_age_groups)
```

The `data` here is returned as an un-parsed JSON string.
Per the API documentation, it has to do with shifting reporting standards across weeks:

>due to reporting standard shifts overtime, the JSON string data may not be consistent across weeks. Minimal effort is taken to normalize some of this data.

Look at the first element of `data`:

```{r}
vaccine_age_groups$data[[1]] %>% str_trunc(80)
```

Parse the JSON:

```{r}
jsonlite::fromJSON(vaccine_age_groups$data[[1]]) %>%
  str()
```

To see how the reporting has changed over time, here is the most recent age group vaccination data:

```{r}
jsonlite::fromJSON(
  vaccine_age_groups$data[[length(vaccine_age_groups$data)]]
) %>%
  str()
```

Each JSON data point can be converted to a data frame as follows:

```{r}
jsonlite::fromJSON(vaccine_age_groups$data[[1]]) %>%
  bind_rows(.id = "group_code") %>%
  gt()
```

Use `map` and `unnest` to apply this to each row of the data:

```{r}
vaccine_age_groups <- vaccine_age_groups %>%
  mutate(
    data = map(
      data,
      ~jsonlite::fromJSON(.x) %>% bind_rows(.id = "group_code")
    )
  ) %>%
  unnest(data)
glimpse(vaccine_age_groups)
```

The unique `group`s:

```{r}
vaccine_age_groups %>% count(group_code, group) %>% rmarkdown::paged_table()
```

Visualize how the age ranges evolve over time:

```{r}
# Make it a function that will allow splits later
plot_age_ranges <- function(vaccine_age_groups, split = "overall", ncol = 3) {
  p <- vaccine_age_groups %>%
    filter(str_detect(group, "\\d")) %>%
    separate(group, into = c("age_min", "age_max"),
             sep = "-", fill = "right", remove = FALSE) %>%
    mutate(
      age_min = readr::parse_number(age_min),
      # Set the upper range of the age to 100 (arbitrarility)
      age_max = replace_na(age_max, replace = "100") %>% as.numeric(),
      age_mid = (age_max + age_min) / 2,
      group = fct_reorder(group, age_mid)
    ) %>%
    ggplot(aes(x = date, color = group)) +
    geom_errorbar(aes(ymin = age_min, ymax = age_max)) +
    geom_text(
      data = . %>%
        slice_min(date) %>%
        mutate(age_mid = (age_max + age_min) / 2),
      aes(label = group, y = age_mid),
      hjust = 1, nudge_x = -3, show.legend = FALSE
    ) +
    geom_text(
      data = . %>%
        slice_max(date) %>%
        mutate(age_mid = (age_max + age_min) / 2),
      aes(label = group, y = age_mid),
      hjust = 0, nudge_x = 3, show.legend = FALSE
    ) +
    expand_limits(x = c(min(vaccine_age_groups$date) - 10,
                        max(vaccine_age_groups$date) + 10)) +
    scale_color_viridis_d(end = 0.8) +
    theme(legend.position = "none") +
    labs(x = "Date", y = "Age",
         title = "Age ranges for weekly vaccination reports, by date")
  
  if (split == "province") p + facet_wrap(~province, ncol = ncol)
  else if (split == "region") p + facet_wrap(~hr_uid, ncol = ncol)
  else {p}
}

plot_age_ranges(vaccine_age_groups)
```

```{r}
#| include: false
ggsave("preview.png", height = 4, width = 6)
```


Unsurprisingly, the age ranges become more granular overtime, with the exception of 70-79 which was originally split into 70-74 and 75-79.

### Province

As with the other data, adding `/split` to the query returns vaccination data by province:

```{r}
#| label: content-vaccines-age-groups
#| cache: true
content_parsed <- paste0(base_url, "vaccines/age-groups/split") %>%
  httr::GET() %>%
  content(as = "parsed")
```

```{r}
vaccine_age_groups_province <- bind_rows(content_parsed$data) %>%
  mutate(date = as.Date(date)) %>%
  filter(date <= "2021-12-28")
glimpse(vaccine_age_groups_province)
```

```{r}
vaccine_age_groups_province <- vaccine_age_groups_province %>%
  mutate(
    data = map(
      data,
      ~jsonlite::fromJSON(.x) %>% bind_rows(.id = "group_code")
    )
  ) %>%
  unnest(data)
glimpse(vaccine_age_groups_province)
```

```{r}
vaccine_age_groups_province %>%
  filter(province == "QC") %>%
  plot_age_ranges(split = "province", ncol = 1)
```

A single province can also be obtained by altering the query with `vaccines/age-groups/province/{code}`:

```{r}
#| label: content-vaccines-age-groups-ns
#| cache: true
content_parsed <- paste0(base_url, "vaccines/age-groups/province/ns") %>%
  httr::GET() %>%
  content(as = "parsed")
```

```{r}
vaccine_age_groups_ns <- bind_rows(content_parsed$data) %>%
  mutate(
    date = as.Date(date),
    data = map(data, ~jsonlite::fromJSON(.x) %>% bind_rows(.id = "group_code"))
  ) %>%
  unnest(data) %>%
  filter(date <= "2021-12-28")
plot_age_ranges(vaccine_age_groups_ns)
```

### Parameters

This query also has the `after` and `before` parameters available:

```{r}
#| label: content-vaccines-age-groups-ns-after
#| cache: true
content_parsed <- paste0(base_url,
                         "vaccines/age-groups/province/ns?after=2021-11-01") %>%
  httr::GET() %>%
  content(as = "parsed")
```

```{r}
glimpse(bind_rows(content_parsed$data))
```

A specific age group can also be queried with the `group` parameter.
The value must be passed in [URL encoding](https://www.w3schools.com/tags/ref_urlencode.ASP).
For example, the 80+ range:

```{r}
#| label: content-vaccines-age-groups-80
#| cache: true
content_parsed <- paste0(base_url,
                         "vaccines/age-groups?after=2021-11-01&group=80%2B") %>%
  httr::GET() %>%
  content(as = "parsed")
```

```{r}
bind_rows(content_parsed$data) %>%
  mutate(
    date = as.Date(date),
    data = map(data, ~jsonlite::fromJSON(.x) %>% bind_rows(.id = "group_code"))
  ) %>%
  unnest(data) %>%
  filter(date <= "2021-12-28") %>%
  glimpse()
```

The `utils` package has a `URLencode` function for translating the age groups:

```{r}
vaccine_age_groups %>%
  distinct(group_code) %>%
  mutate(group_encoded = utils::URLencode(group_code, reserved = TRUE)) %>%
  gt()
```

## Provinces

The API also provides a list of provinces and some population/geographical data:

```{r}
#| label: content-provinces
#| cache: true
content_parsed <- paste0(base_url, "provinces") %>%
  httr::GET() %>%
  content(as = "parsed")
```

```{r}
provinces <- bind_rows(content_parsed)
glimpse(provinces)
```

The extra elements reported here are not related to any particular province/territory:

```{r}
provinces %>% filter(is.na(population)) %>% glimpse()
```

The `geo_only` parameter can be set to `true` to exclude these:

```{r}
#| label: provinces-geo-only
#| cache: true
paste0(base_url, "provinces?geo_only=true") %>%
  httr::GET() %>%
  content(as = "parsed") %>%
  bind_rows() %>%
  glimpse()
```

A helpful variable is `data_status`, which indicates if the daily numbers have been reported:

```{r}
provinces %>%
  select(name, data_status, updated_at) %>%
  gt()
```

`data_status` may take on the following values:

| `data_status`            | Meaning                                                                                                                                                               |   |   |   |
|--------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|---|---|---|
| Waiting for report       | This status indicated that an update is expected to happen in the current day, but has not yet occurred.                                                              |   |   |   |
| In progress              | This  status indicates that an update is in-progress and will be completed  soon. Note that when this status is indicated, some or all data may not  be updated yet. |   |   |   |
| Reported                 | When this status is indicated, the province has been updated with final data for the day, and the update is complete.                                                |   |   |   |
| No report expected today | When  this status is indicated, the province is not expected to provide an  update on the current day, and one should not be expected.                               |   |   |   |
| Custom                   | Custom statuses are used to communicate certain issues with a province's update including delays or partial updates.                                                 |   |   |   |

The `density` variable is population density, which is computed by dividing `population` by `area`:

```{r}
provinces %>%
  transmute(name, population, area, density,
            density_manual = population / area) %>%
  gt()
```

## Next steps

I'm impressed by the organization and accessibility of this API, and decided to write a simple R package to wrap it.
In my next post, I'll detail my steps and thought process.

## Reproducibility {.appendix .unlisted}

<details><summary>Session info</summary>

```{r}
#| echo: false
devtools::session_info()$platform
devtools::session_info()$packages %>%
  rmarkdown::paged_table()
```

</details>

<details><summary>Git repository</summary>

```{r}
#| echo: false
git2r::repository()
```

</details>

```{r}
#| echo: false
#| results: asis
cat(dunnr::get_quarto_source(date = params$date, slug = params$slug))
```
